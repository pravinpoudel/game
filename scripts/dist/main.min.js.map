{"version":3,"sources":["main.js"],"names":["cubePosition","vs","wvProjectionMatrixLocation","gl","degToRadian","querySelector","getContext","deg","program","webglUtils","createProgramFromSources","fs","positionLocation","getAttributeLocation","vao","getUniformLocation","createVertexArray","bindVertexArray","positionBufferr","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","console","log"],"mappings":"aAAA,IAAAA,aAAA,CAGE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAD7E,EAAMA,EAAAA,EAAAA,EAAAA,EAAY,EAChB,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAIvBC,GAAE,0QAoCFC,GAAAA,0KAXN,WAkCE,IACEC,EADOC,SAATC,cAA0B,gBAChBC,WAAiBC,UAC1B,GAAAJ,EAAA,CAQD,IAAAK,EAAAC,WAAAC,yBAAAP,EAAA,CAAAF,GAAAU,KAlCIC,EAAmBH,WAAWI,qBAAqBL,EAAS,cA4C9DM,GA3C+BL,WAAWM,mBAqC5CP,EAEE,wBAIAL,EAAAa,qBACAb,EAAAc,gBAAAH,GAGD,IAAAI,EAAAf,EAAAgB,eA1DHhB,EAAAiB,WAAAjB,EAAAkB,aAAAH,GAuBEf,EAAGmB,WACDnB,EAAGkB,aACH,IAAIE,aAAavB,cACjBG,EAAGqB,aAELrB,EAAGsB,wBAAwBb,GAC3BT,EAAGuB,oBAAoBd,EAAkB,EAAG,GAAG,EAAO,EAAG,QAzBvDe,QAAQC,IAAI,oBAJhB","file":"main.min.js","sourcesContent":["`use strict`;\r\n\r\nconst cubePosition = [\r\n  1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0,\r\n  0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0,\r\n];\r\n\r\nconst vs = `#version 300 es\r\n    in vec3 a_position;\r\n    in float a_textureCordinate;\r\n    \r\n    // create sampler\r\n    \r\n    uniform mat4 u_wvProjectionMatrix;\r\n\r\n    function main(){\r\n        vec4 gl_Position = multiply viewMatrix *vec4(a_position, 1.0);\r\n       \r\n    }\r\n`;\r\n\r\nconst fs = `#version 300 es\r\n        precision highp float;\r\n\r\n        out vec4 outColor;\r\n\r\n        void main(){\r\n            outColor = vec3(0.5, 0.8, 1.0, 1.0);\r\n        }\r\n\r\n`;\r\n\r\n(function () {\r\n  const canvas = document.querySelector(\"#main-canvas\");\r\n  let gl = canvas.getContext(\"webgl2\");\r\n  if (!gl) {\r\n    console.log(\"webgl2 not found\");\r\n    return;\r\n  }\r\n  // create a program\r\n  let program = webglUtils.createProgramFromSources(gl, [vs, fs]);\r\n  // find position of all the attribute;\r\n  let positionLocation = webglUtils.getAttributeLocation(program, \"a_position\");\r\n  let wvProjectionMatrixLocation = webglUtils.getUniformLocation(\r\n    program,\r\n    \"u_wvProjectionMatrix\"\r\n  );\r\n\r\n  // create a vertex array to store the state of the program\r\n  let vao = gl.createVertexArray();\r\n  gl.bindVertexArray(vao);\r\n\r\n  // change the state and input the value of the attributes with Vertex Buffer Object\r\n  let positionBufferr = gl.createBuffer();\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBufferr);\r\n  gl.bufferData(\r\n    gl.ARRAY_BUFFER,\r\n    new Float32Array(cubePosition),\r\n    gl.STATIC_DRAW\r\n  );\r\n  gl.enableVertexAttribArray(positionLocation);\r\n  gl.vertexAttribPointer(positionLocation, 3, 0, false, 0, 0);\r\n  // calculate and input the uniform value - other than needed in draw scene/updating uniforms\r\n\r\n  // create a utility function\r\n\r\n  function degToRadian(deg) {\r\n    return (Math.PI / 180) * deg;\r\n  }\r\n\r\n  function radToDegree(rad) {\r\n    return (180 / Math.PI) * rad;\r\n  }\r\n\r\n  // call a function drawscene\r\n\r\n  // call drawScene in loop\r\n\r\n  // call the draw calls\r\n\r\n  function drawScene() {\r\n    //handle resized canvas\r\n    // set view port\r\n    // clear color, color buffer and depth buffer\r\n    //enable cullface, depth test and blending\r\n    // specify the active program and VAO\r\n    //update the camera position if needed in the shader\r\n    // since there might be changed aspect, calculate the perspective matrix\r\n    // update the  world view matrix\r\n    // call draw call to draw array\r\n  }\r\n})();\r\n"]}