{"version":3,"sources":["main.js"],"names":["cubePosition","up","vs","fs","gl","TEXTURE_2D","RGBA","getContext","getExtension","program","webglUtils","rad","positionLocation","getAttribLocation","viewProjectionLocation","getUniformLocation","vao","createVertexArray","bindVertexArray","sphere","drawScene","positionBufferr","canvas","clearColor","ARRAY_BUFFER","enable","DEPTH_TEST","cameraDegree","vertexAttribPointer","degToRadian","FLOAT","cameraMatrix","translate","cameraPosition","ballImage","src","inverse","textImage2D","bindBuffer","bufferData","requestAnimationFrame","resizeCanvasToDisplaySize","viewport","width","height","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","CULL_FACE","BLEND","useProgram","cameraRadian","m4","yRotation","lookAt","initialCameraSetup","viewMatrix","aspect","clientWidth","clientHeight","fieldofView","projectionMatrix","perspective","indicesBuffer","createBuffer","ELEMENT_ARRAY_BUFFER","Uint32Array","_toConsumableArray","STATIC_DRAW","vProjectionMatrix","multiply","uniformMatrix4fv","drawElements","TRIANGLES","length","UNSIGNED_INT","window","console","log","deg","Math","PI"],"mappings":"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","file":"main.min.js","sourcesContent":["`use strict`;\r\n\r\nconst cubePosition = [\r\n  1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0,\r\n  0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0,\r\n];\r\nconst up = [0, 1, 0];\r\n\r\nconst vs = `#version 300 es\r\n    in vec3 a_position;\r\n    in float a_textureCordinate;\r\n    \r\n    uniform mat4 u_wvProjectionMatrix;\r\n\r\n    out vec4 vertexCordinate;\r\n\r\n    void main(){\r\n        // gl_Position =  u_wvProjectionMatrix* vec4((2.0*a_position)- vec3(1.0, 1.0, 1.0), 1.0);\r\n        gl_Position =  u_wvProjectionMatrix* vec4(a_position, 1.0);\r\n \r\n        vertexCordinate = gl_Position;   \r\n    }\r\n`;\r\n\r\nconst fs = `#version 300 es\r\n        precision highp float;\r\n\r\n        in vec4 vertexCordinate;\r\n        uniform sampler2D u_image;\r\n\r\n        out vec4 outColor;\r\n\r\n        void main(){\r\n            // outColor = fragmentColor;\r\n            float textureSampled = texture2D(u_image, vertexCordinate);\r\n            outColor = textureSampled;\r\n            // outColor = vec4(1.0, 0.0, 0.5, 1.0);\r\n        }\r\n\r\n`;\r\n\r\n(function () {\r\n  const canvas = document.querySelector(\"#main-canvas\");\r\n  let gl = canvas.getContext(\"webgl2\");\r\n  if (!gl) {\r\n    console.log(\"webgl2 not found\");\r\n    return;\r\n  }\r\n\r\n  var ext = gl.getExtension(\"OES_element_index_uint\");\r\n\r\n  let program = webglUtils.createProgramFromSources(gl, [vs, fs]);\r\n  let positionLocation = gl.getAttribLocation(program, \"a_position\");\r\n  let viewProjectionLocation = gl.getUniformLocation(\r\n    program,\r\n    \"u_wvProjectionMatrix\"\r\n  );\r\n\r\n  let vao = gl.createVertexArray();\r\n  gl.bindVertexArray(vao);\r\n\r\n  const sphere = sphereVertIndices();\r\n\r\n  let positionBufferr = gl.createBuffer();\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBufferr);\r\n  gl.bufferData(\r\n    gl.ARRAY_BUFFER,\r\n    new Uint16Array([...sphere[0]]),\r\n    gl.STATIC_DRAW\r\n  );\r\n\r\n  gl.enableVertexAttribArray(positionLocation);\r\n  gl.vertexAttribPointer(positionLocation, 3, gl.FLOAT, false, 0, 0);\r\n\r\n  let ballImage = new Image();\r\n  ballImage.crossOrigin = \"\";\r\n  ballImage.src = \"http://localhost/images/texture/ball.jpg\";\r\n\r\n  let ballTexture = gl.createTexture();\r\n  gl.textImage2D(\r\n    gl.TEXTURE_2D,\r\n    0,\r\n    gl.RGBA,\r\n    gl.RGBA,\r\n    gl.UNSIGNED_BYTE,\r\n    ballImage\r\n  );\r\n  // put color as a texture at first\r\n  // load an image as a texture\r\n\r\n  // revolve an object around x axis\r\n\r\n  function degToRadian(deg) {\r\n    return (Math.PI / 180) * deg;\r\n  }\r\n\r\n  function radToDegree(rad) {\r\n    return (180 / Math.PI) * rad;\r\n  }\r\n\r\n  function initialCameraSetup(cameraPosition, up) {\r\n    let cameraMatrix = m4.lookAt(cameraPosition, [1, 0, 0], up);\r\n    return cameraMatrix;\r\n  }\r\n\r\n  let cameraDegree = 0;\r\n\r\n  function drawScene() {\r\n    webglUtils.resizeCanvasToDisplaySize(gl.canvas);\r\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n\r\n    gl.clearColor(0.5, 0.5, 0.5, 0.5);\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.enable(gl.BLEND);\r\n\r\n    gl.useProgram(program);\r\n    gl.bindVertexArray(vao);\r\n    cameraDegree += 0.4;\r\n    let cameraRadian = degToRadian(cameraDegree);\r\n    let cameraMatrix = m4.yRotation(cameraRadian);\r\n    cameraMatrix = m4.translate(cameraMatrix, 0.0, 0.0, 1.5);\r\n\r\n    cameraPosition = [cameraMatrix[12], cameraMatrix[13], cameraMatrix[14]];\r\n    // cameraPosition = [0.5, 2.0, 1.5];\r\n    cameraMatrix = initialCameraSetup(cameraPosition, up);\r\n    viewMatrix = m4.inverse(cameraMatrix);\r\n\r\n    let aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    let fieldofView = degToRadian(60);\r\n    let projectionMatrix = m4.perspective(fieldofView, aspect, 0.01, 1000);\r\n\r\n    let indicesBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indicesBuffer);\r\n    gl.bufferData(\r\n      gl.ELEMENT_ARRAY_BUFFER,\r\n      new Uint32Array([...sphere[1]]),\r\n      gl.STATIC_DRAW\r\n    );\r\n\r\n    let vProjectionMatrix = m4.multiply(projectionMatrix, viewMatrix);\r\n    gl.uniformMatrix4fv(viewProjectionLocation, false, vProjectionMatrix);\r\n    gl.drawElements(gl.TRIANGLES, sphere[1].length, gl.UNSIGNED_INT, 0);\r\n    window.requestAnimationFrame(drawScene);\r\n  }\r\n\r\n  requestAnimationFrame(drawScene);\r\n})();\r\n"]}