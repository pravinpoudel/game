{"version":3,"sources":["main.js"],"names":["cubePosition","up","modelDegree","cameraYposition","vs","fs","pixel","gl","UNSIGNED_BYTE","Uint8Array","texImage2D","getExtension","console","webglUtils","createProgramFromSources","positionLocation","TEXTURE_2D","internallFormat","sphereTextLocation","TEXTURE_WRAP_S","CLAMP_TO_EDGE","viewProjectionLocation","getUniformLocation","modelMatrixLocation","program","vao","Math","createVertexArray","bindVertexArray","sphere","radToDegree","positionBufferr","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","_toConsumableArray","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","ballTexture","TEXTURE1","COLOR_BUFFER_BIT","enable","DEPTH_TEST","RGBA","uniform1i","srcType","modelRadian","degToRadian","cameraPosition","cameraMatrix","ballImage","fieldofView","projectionMatrix","indicesBuffer","ELEMENT_ARRAY_BUFFER","vProjectionMatrix","uniformMatrix4fv","drawElements","srcFormat","requestAnimationFrame","texParameteri","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","cameraDegree","drawScene","resizeCanvasToDisplaySize","canvas","viewport","width","height","clearColor","clear","DEPTH_BUFFER_BIT","CULL_FACE","cullFace","BACK","BLEND","useProgram","cameraRadian","modelMatrix","m4","yRotation","translate","lookAt","initialCameraSetup","viewMatrix","inverse","aspect","clientWidth","clientHeight","perspective","Uint16Array","multiply","TRIANGLES","length","UNSIGNED_SHORT","window","deg","PI"],"mappings":"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","file":"main.min.js","sourcesContent":["`use strict`;\r\n\r\nconst cubePosition = [\r\n  1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0,\r\n  0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0,\r\n];\r\nconst up = [0, 1, 0];\r\nlet modelDegree = 0;\r\nlet cameraYposition = 1.5;\r\n\r\nconst vs = `#version 300 es\r\n    in vec3 a_position;\r\n    in float a_textureCordinate;\r\n    \r\n    uniform mat4 u_ModelMatrix;\r\n    uniform mat4 u_wvProjectionMatrix;\r\n\r\n    out vec3 vertexCordinate;\r\n\r\n    void main(){\r\n        // gl_Position =  u_wvProjectionMatrix* vec4((2.0*a_position)- vec3(1.0, 1.0, 1.0), 1.0);  \r\n        gl_Position =  u_wvProjectionMatrix* u_ModelMatrix* vec4(a_position, 1.0);\r\n        //gl_Position =  u_wvProjectionMatrix* vec4(a_position, 1.0);\r\n        vertexCordinate = a_position;   \r\n    }\r\n`;\r\n\r\nconst fs = `#version 300 es\r\n\r\n    #define M_PI 3.1415926535897932384626433832795\r\n\r\n    precision mediump float;\r\n\r\n    in vec3 vertexCordinate;\r\n    uniform sampler2D u_sphereText;\r\n\r\n    out vec4 outColor;\r\n\r\n    void main(){\r\n     \r\n        vec3 vertDirection = normalize(vertexCordinate - vec3(0.0, 0.0, 0.0));\r\n        float u = atan(vertDirection.x, vertDirection.z)/(2.0*M_PI) + 0.5;\r\n        float v = 0.5-vertDirection.y ;\r\n    \r\n        outColor = texture(u_sphereText, vec2(u,v));\r\n        // outColor = vec4(1.0, 0.8,  0.0, 1.0);\r\n    }\r\n\r\n`;\r\n\r\n(function () {\r\n  const canvas = document.querySelector(\"#main-canvas\");\r\n  let gl = canvas.getContext(\"webgl2\");\r\n  if (!gl) {\r\n    console.log(\"webgl2 not found\");\r\n    return;\r\n  }\r\n  var ext = gl.getExtension(\"OES_element_index_uint\");\r\n\r\n  let program = webglUtils.createProgramFromSources(gl, [vs, fs]);\r\n  let positionLocation = gl.getAttribLocation(program, \"a_position\");\r\n  let sphereTextLocation = gl.getUniformLocation(program, \"u_sphereText\");\r\n  let viewProjectionLocation = gl.getUniformLocation(\r\n    program,\r\n    \"u_wvProjectionMatrix\"\r\n  );\r\n  let modelMatrixLocation = gl.getUniformLocation(program, \"u_ModelMatrix\");\r\n\r\n  let vao = gl.createVertexArray();\r\n  gl.bindVertexArray(vao);\r\n\r\n  const sphere = sphereVertIndices();\r\n\r\n  let positionBufferr = gl.createBuffer();\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBufferr);\r\n  gl.bufferData(\r\n    gl.ARRAY_BUFFER,\r\n    new Float32Array([...sphere[0]]),\r\n    gl.STATIC_DRAW\r\n  );\r\n\r\n  gl.enableVertexAttribArray(positionLocation);\r\n  gl.vertexAttribPointer(positionLocation, 3, gl.FLOAT, false, 0, 0);\r\n\r\n  let ballTexture = gl.createTexture();\r\n  gl.activeTexture(gl.TEXTURE1);\r\n  gl.bindTexture(gl.TEXTURE_2D, ballTexture);\r\n\r\n  const level = 0;\r\n  const internallFormat = gl.RGBA;\r\n  const width = 1;\r\n  const height = 1;\r\n  const border = 0;\r\n  const srcFormat = gl.RGBA;\r\n  const srcType = gl.UNSIGNED_BYTE;\r\n  const pixel = new Uint8Array([0, 0, 255, 255]);\r\n  gl.texImage2D(\r\n    gl.TEXTURE_2D,\r\n    level,\r\n    internallFormat,\r\n    width,\r\n    height,\r\n    border,\r\n    srcFormat,\r\n    srcType,\r\n    pixel\r\n  );\r\n\r\n  let ballImage = new Image();\r\n  ballImage.crossOrigin = \"\";\r\n  ballImage.src = \"http://localhost/game/images/texture/ball.jpg\";\r\n\r\n  ballImage.onload = function () {\r\n    console.log(\"i am loaded\");\r\n    gl.texImage2D(\r\n      gl.TEXTURE_2D,\r\n      level,\r\n      internallFormat,\r\n      srcFormat,\r\n      srcType,\r\n      ballImage\r\n    );\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n  };\r\n\r\n  function degToRadian(deg) {\r\n    return (Math.PI / 180) * deg;\r\n  }\r\n\r\n  function radToDegree(rad) {\r\n    return (180 / Math.PI) * rad;\r\n  }\r\n\r\n  function initialCameraSetup(cameraPosition, up) {\r\n    let cameraMatrix = m4.lookAt(cameraPosition, [1, 0, 0], up);\r\n    return cameraMatrix;\r\n  }\r\n\r\n  let cameraDegree = 0;\r\n\r\n  function drawScene() {\r\n    webglUtils.resizeCanvasToDisplaySize(gl.canvas);\r\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n\r\n    gl.clearColor(0.5, 0.5, 0.5, 0.5);\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.cullFace(gl.BACK);\r\n\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.enable(gl.BLEND);\r\n\r\n    gl.useProgram(program);\r\n    gl.bindVertexArray(vao);\r\n    gl.uniform1i(sphereTextLocation, 1);\r\n\r\n    // cameraDegree += 0.4;\r\n\r\n    let modelRadian = degToRadian(modelDegree);\r\n    let cameraRadian = degToRadian(cameraDegree);\r\n\r\n    // -------------------------------------------------------------------\r\n    let modelMatrix = m4.yRotation(modelRadian);\r\n    gl.uniformMatrix4fv(modelMatrixLocation, false, modelMatrix);\r\n    // --------------------------------------------------------------------\r\n\r\n    let cameraMatrix = m4.yRotation(cameraRadian);\r\n\r\n    cameraMatrix = m4.translate(cameraMatrix, 0.0, 0.0, 2.0);\r\n\r\n    cameraPosition = [cameraMatrix[12], cameraMatrix[13], cameraMatrix[14]];\r\n    // cameraPosition = [0.0, 1.0, 1.5];\r\n    cameraMatrix = initialCameraSetup(cameraPosition, up);\r\n\r\n    viewMatrix = m4.inverse(cameraMatrix);\r\n\r\n    let aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    let fieldofView = degToRadian(90);\r\n    let projectionMatrix = m4.perspective(fieldofView, aspect, 0.01, 1000);\r\n\r\n    let indicesBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indicesBuffer);\r\n    gl.bufferData(\r\n      gl.ELEMENT_ARRAY_BUFFER,\r\n      new Uint16Array([...sphere[1]]),\r\n      gl.STATIC_DRAW\r\n    );\r\n\r\n    let vProjectionMatrix = m4.multiply(projectionMatrix, viewMatrix);\r\n    gl.uniformMatrix4fv(viewProjectionLocation, false, vProjectionMatrix);\r\n    gl.drawElements(gl.TRIANGLES, sphere[1].length, gl.UNSIGNED_SHORT, 0);\r\n    window.requestAnimationFrame(drawScene);\r\n  }\r\n\r\n  requestAnimationFrame(drawScene);\r\n})();\r\n"]}