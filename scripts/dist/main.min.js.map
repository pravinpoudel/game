{"version":3,"sources":["main.js"],"names":["cubePosition","up","vs","ext","gl","ballImage","TEXTURE_2D","internallFormat","getContext","log","getExtension","console","program","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","positionLocation","TEXTURE_WRAP_T","sphereTextLocation","TEXTURE_MIN_FILTER","viewProjectionLocation","getUniformLocation","modelMatrixLocation","deg","vao","createVertexArray","bindVertexArray","radToDegree","sphere","sphereVertIndices","positionBufferr","initialCameraSetup","bindBuffer","cameraMatrix","cameraPosition","bufferData","ARRAY_BUFFER","Float32Array","_toConsumableArray","cameraDegree","enableVertexAttribArray","webglUtils","resizeCanvasToDisplaySize","canvas","ballTexture","createTexture","COLOR_BUFFER_BIT","CULL_FACE","useProgram","RGBA","modelDegree","modelRadian","UNSIGNED_BYTE","cameraRadian","Uint8Array","degToRadian","texImage2D","srcFormat","viewMatrix","projectionMatrix","indicesBuffer","vProjectionMatrix","uniformMatrix4fv","drawElements","window","requestAnimationFrame","srcType","NEAREST","TEXTURE_MAG_FILTER","drawScene","viewport","width","height","clearColor","clear","DEPTH_BUFFER_BIT","enable","DEPTH_TEST","BLEND","uniform1i","modelMatrix","m4","yRotation","translate","lookAt","inverse","aspect","clientWidth","clientHeight","fieldofView","perspective","createBuffer","ELEMENT_ARRAY_BUFFER","Uint16Array","STATIC_DRAW","multiply","TRIANGLES","length","UNSIGNED_SHORT","src","Math","PI"],"mappings":"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","file":"main.min.js","sourcesContent":["`use strict`;\r\n\r\nconst cubePosition = [\r\n  1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0,\r\n  0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0,\r\n];\r\nconst up = [0, 1, 0];\r\n\r\nconst vs = `#version 300 es\r\n    in vec3 a_position;\r\n    in float a_textureCordinate;\r\n    \r\n    uniform mat4 u_ModelMatrix;\r\n    uniform mat4 u_wvProjectionMatrix;\r\n\r\n    out vec3 vertexCordinate;\r\n\r\n    void main(){\r\n        // gl_Position =  u_wvProjectionMatrix* vec4((2.0*a_position)- vec3(1.0, 1.0, 1.0), 1.0);\r\n        gl_Position =  u_wvProjectionMatrix* u_ModelMatrix* vec4(a_position, 1.0);\r\n        // gl_Position =  u_wvProjectionMatrix* vec4(a_position, 1.0);\r\n \r\n        vertexCordinate = a_position;   \r\n    }\r\n`;\r\n\r\nconst fs = `#version 300 es\r\n\r\n    #define M_PI 3.1415926535897932384626433832795\r\n\r\n    precision mediump float;\r\n\r\n    in vec3 vertexCordinate;\r\n    uniform sampler2D u_sphereText;\r\n\r\n    out vec4 outColor;\r\n\r\n    void main(){\r\n     \r\n        //  generation of UV cordinate\r\n        vec3 vertDirection = normalize(vertexCordinate - vec3(0.0, 0.0, 0.0));\r\n        float u = atan(vertDirection.x, vertDirection.z)/(2.0*M_PI) + 0.5;\r\n        float v = 0.5-vertDirection.y ;\r\n    \r\n        outColor = texture(u_sphereText, vec2(u,v));\r\n        // outColor = vec4(1.0, 0.8,  0.0, 1.0);\r\n    }\r\n\r\n`;\r\n\r\n(function () {\r\n  const canvas = document.querySelector(\"#main-canvas\");\r\n  let gl = canvas.getContext(\"webgl2\");\r\n  if (!gl) {\r\n    console.log(\"webgl2 not found\");\r\n    return;\r\n  }\r\n  var ext = gl.getExtension(\"OES_element_index_uint\");\r\n\r\n  let program = webglUtils.createProgramFromSources(gl, [vs, fs]);\r\n  let positionLocation = gl.getAttribLocation(program, \"a_position\");\r\n  let sphereTextLocation = gl.getUniformLocation(program, \"u_sphereText\");\r\n  let viewProjectionLocation = gl.getUniformLocation(\r\n    program,\r\n    \"u_wvProjectionMatrix\"\r\n  );\r\n  let modelMatrixLocation = gl.getUniformLocation(program, \"u_ModelMatrix\");\r\n\r\n  let vao = gl.createVertexArray();\r\n  gl.bindVertexArray(vao);\r\n\r\n  const sphere = sphereVertIndices();\r\n\r\n  let positionBufferr = gl.createBuffer();\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBufferr);\r\n  gl.bufferData(\r\n    gl.ARRAY_BUFFER,\r\n    new Float32Array([...sphere[0]]),\r\n    gl.STATIC_DRAW\r\n  );\r\n\r\n  gl.enableVertexAttribArray(positionLocation);\r\n  gl.vertexAttribPointer(positionLocation, 3, gl.FLOAT, false, 0, 0);\r\n\r\n  let ballTexture = gl.createTexture();\r\n  gl.activeTexture(gl.TEXTURE1);\r\n  gl.bindTexture(gl.TEXTURE_2D, ballTexture);\r\n\r\n  const level = 0;\r\n  const internallFormat = gl.RGBA;\r\n  const width = 1;\r\n  const height = 1;\r\n  const border = 0;\r\n  const srcFormat = gl.RGBA;\r\n  const srcType = gl.UNSIGNED_BYTE;\r\n  const pixel = new Uint8Array([0, 0, 255, 255]);\r\n  gl.texImage2D(\r\n    gl.TEXTURE_2D,\r\n    level,\r\n    internallFormat,\r\n    width,\r\n    height,\r\n    border,\r\n    srcFormat,\r\n    srcType,\r\n    pixel\r\n  );\r\n\r\n  let ballImage = new Image();\r\n  ballImage.crossOrigin = \"\";\r\n  ballImage.src = \"http://localhost/game/images/texture/ball.jpg\";\r\n\r\n  ballImage.onload = function () {\r\n    console.log(\"i am loaded\");\r\n    gl.texImage2D(\r\n      gl.TEXTURE_2D,\r\n      level,\r\n      internallFormat,\r\n      srcFormat,\r\n      srcType,\r\n      ballImage\r\n    );\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n  };\r\n\r\n  function degToRadian(deg) {\r\n    return (Math.PI / 180) * deg;\r\n  }\r\n\r\n  function radToDegree(rad) {\r\n    return (180 / Math.PI) * rad;\r\n  }\r\n\r\n  function initialCameraSetup(cameraPosition, up) {\r\n    let cameraMatrix = m4.lookAt(cameraPosition, [1, 0, 0], up);\r\n    return cameraMatrix;\r\n  }\r\n\r\n  let cameraDegree = 0;\r\n  let modelDegree = 0;\r\n\r\n  function drawScene() {\r\n    webglUtils.resizeCanvasToDisplaySize(gl.canvas);\r\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n\r\n    gl.clearColor(0.5, 0.5, 0.5, 0.5);\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.enable(gl.BLEND);\r\n\r\n    gl.useProgram(program);\r\n    gl.bindVertexArray(vao);\r\n    gl.uniform1i(sphereTextLocation, 1);\r\n\r\n    // cameraDegree += 0.4;\r\n    modelDegree += 1.0;\r\n    let modelRadian = degToRadian(modelDegree);\r\n    let cameraRadian = degToRadian(cameraDegree);\r\n\r\n    // -------------------------------------------------------------------\r\n    let modelMatrix = m4.yRotation(modelRadian);\r\n    gl.uniformMatrix4fv(modelMatrixLocation, false, modelMatrix);\r\n    // --------------------------------------------------------------------\r\n\r\n    let cameraMatrix = m4.yRotation(cameraRadian);\r\n\r\n    cameraMatrix = m4.translate(cameraMatrix, 0.0, 0.0, 1.5);\r\n\r\n    cameraPosition = [cameraMatrix[12], cameraMatrix[13], cameraMatrix[14]];\r\n    // cameraPosition = [0.0, 1.0, 1.5];\r\n    cameraMatrix = initialCameraSetup(cameraPosition, up);\r\n    viewMatrix = m4.inverse(cameraMatrix);\r\n\r\n    let aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    let fieldofView = degToRadian(90);\r\n    let projectionMatrix = m4.perspective(fieldofView, aspect, 0.01, 1000);\r\n\r\n    let indicesBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indicesBuffer);\r\n    gl.bufferData(\r\n      gl.ELEMENT_ARRAY_BUFFER,\r\n      new Uint16Array([...sphere[1]]),\r\n      gl.STATIC_DRAW\r\n    );\r\n\r\n    let vProjectionMatrix = m4.multiply(projectionMatrix, viewMatrix);\r\n    gl.uniformMatrix4fv(viewProjectionLocation, false, vProjectionMatrix);\r\n    gl.drawElements(gl.TRIANGLES, sphere[1].length, gl.UNSIGNED_SHORT, 0);\r\n    window.requestAnimationFrame(drawScene);\r\n  }\r\n\r\n  requestAnimationFrame(drawScene);\r\n})();\r\n"]}