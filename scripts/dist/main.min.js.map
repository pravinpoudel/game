{"version":3,"sources":["main.js"],"names":["cubePosition","up","vs","fs","gl","document","querySelector","getContext","getExtension","program","radToDegree","createProgramFromSources","positionLocation","rad","viewProjectionLocation","getUniformLocation","vao","createVertexArray","bindVertexArray","sphere","sphereVertIndices","webglUtils","resizeCanvasToDisplaySize","ARRAY_BUFFER","width","clear","enable","CULL_FACE","FLOAT","cameraDegree","requestAnimationFrame","drawScene","canvas","viewport","height","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","DEPTH_TEST","BLEND","useProgram","cameraRadian","degToRadian","cameraMatrix","m4","yRotation","translate","cameraPosition","window","lookAt","initialCameraSetup","viewMatrix","inverse","aspect","clientWidth","clientHeight","fieldofView","projectionMatrix","perspective","indicesBuffer","createBuffer","bindBuffer","ELEMENT_ARRAY_BUFFER","bufferData","Uint32Array","_toConsumableArray","STATIC_DRAW","vProjectionMatrix","multiply","uniformMatrix4fv","drawElements","TRIANGLES","length","UNSIGNED_INT","console","log","deg"],"mappings":"8dAEA,IAAMA,aAAe,CACnB,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3E,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAEzCC,GAAK,CAAC,EAAG,EAAG,GAEZC,GAAE,2YAoCLC,GAAA,sPA2BD,WACA,IACAC,EADAC,SAAAC,cAAA,gBACAC,WAAA,UACA,GAAAH,EAAA,CAMCA,EAAAI,aAAA,0BAAA,IAEDC,EAASC,WAATC,yBAA0BP,EAAA,CAAAF,GAAAC,KACxBS,EAAOR,EAAkBS,kBAAzBJ,EAAA,cACDK,EAAAV,EAAAW,mBAjCCN,EAmCF,wBAGCO,EAAAZ,EAAAa,oBAjCDb,EAAGc,gBAAgBF,GAEnB,IAAMG,EAASC,oBAoCbC,EAAWC,EAAAA,eACXlB,EAAAA,WAAYA,EAAGmB,aAAaC,GAE5BpB,EAAAA,WACAA,EAAGqB,aACHrB,IAAGsB,YAAHtB,mBAAauB,EAAb,KACAvB,EAAGsB,aAGHtB,EAAAA,wBAAAQ,GACAR,EAAAA,oBAAmBY,EAAnB,EAAAZ,EAAAwB,OAAA,EAAA,EAAA,GAbF,IAAIC,EAAe,EA0CnBC,sBAxCA,SAASC,IACPV,WAAWC,0BAA0BlB,EAAG4B,QACxC5B,EAAG6B,SAAS,EAAG,EAAG7B,EAAG4B,OAAOR,MAAOpB,EAAG4B,OAAOE,QAE7C9B,EAAG+B,WAAW,GAAK,GAAK,GAAK,IAC7B/B,EAAGqB,MAAMrB,EAAGgC,iBAAmBhC,EAAGiC,kBAClCjC,EAAGsB,OAAOtB,EAAGuB,WACbvB,EAAGsB,OAAOtB,EAAGkC,YACblC,EAAGsB,OAAOtB,EAAGmC,OAEbnC,EAAGoC,WAAW/B,GACdL,EAAGc,gBAAgBF,GAEnB,IAAIyB,EAAeC,EADnBb,GAAgB,IAEZc,EAAeC,GAAGC,UAAUJ,GAChCE,EAAeC,GAAGE,UAAUH,EAAc,EAAK,EAAK,KAEpDI,eAAiB,CAACJ,EAAa,IAAKA,EAAa,IAAKA,EAAa,KAEnEA,EAkBAK,SAAOlB,EAAP7B,GA1CA,OA2CD2C,GAAAK,OAAAF,EAAA,CAAA,EAAA,EAAA,GAAA9C,GAnBgBiD,CAAmBH,eAAgB9C,IAClDkD,WAAaP,GAAGQ,QAAQT,GAExB,IAAIU,EAASjD,EAAG4B,OAAOsB,YAAclD,EAAG4B,OAAOuB,aAC3CC,EAAcd,EAAY,IAC1Be,EAAmBb,GAAGc,YAAYF,EAAaH,EAAQ,IAAM,KAE7DM,EAAgBvD,EAAGwD,eACvBxD,EAAGyD,WAAWzD,EAAG0D,qBAAsBH,GACvCvD,EAAG2D,WACD3D,EAAG0D,qBACH,IAAIE,YAAJC,mBAAoB9C,EAAO,KAC3Bf,EAAG8D,aAGL,IAAIC,EAAoBvB,GAAGwB,SAASX,EAAkBN,YACtD/C,EAAGiE,iBAAiBvD,GAAwB,EAAOqD,GACnD/D,EAAGkE,aAAalE,EAAGmE,UAAWpD,EAAO,GAAGqD,OAAQpE,EAAGqE,aAAc,GACjEzB,OAAOlB,sBAAsBC,UAtD/B2C,QAAAC,IAAA,oBAwCE,SAAInB,EAAcd,GAClB,OAAIe,KAAAA,GAAAA,IAAqBmB,GA9C3B","file":"main.min.js","sourcesContent":["`use strict`;\r\n\r\nconst cubePosition = [\r\n  1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0,\r\n  0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0,\r\n];\r\nconst up = [0, 1, 0];\r\n\r\nconst vs = `#version 300 es\r\n    in vec3 a_position;\r\n    in float a_textureCordinate;\r\n    \r\n    uniform mat4 u_wvProjectionMatrix;\r\n\r\n    out vec4 fragmentColor;\r\n\r\n    void main(){\r\n        // gl_Position =  u_wvProjectionMatrix* vec4((2.0*a_position)- vec3(1.0, 1.0, 1.0), 1.0);\r\n        gl_Position =  u_wvProjectionMatrix* vec4(a_position, 1.0);\r\n \r\n        fragmentColor = gl_Position;   \r\n    }\r\n`;\r\n\r\nconst fs = `#version 300 es\r\n        precision highp float;\r\n\r\n        in vec4 fragmentColor;\r\n\r\n        out vec4 outColor;\r\n\r\n        void main(){\r\n            // outColor = fragmentColor;\r\n            outColor = vec4(1.0, 0.0, 0.5, 1.0);\r\n        }\r\n\r\n`;\r\n\r\n(function () {\r\n  const canvas = document.querySelector(\"#main-canvas\");\r\n  let gl = canvas.getContext(\"webgl2\");\r\n  if (!gl) {\r\n    console.log(\"webgl2 not found\");\r\n    return;\r\n  }\r\n\r\n  var ext = gl.getExtension(\"OES_element_index_uint\");\r\n\r\n  let program = webglUtils.createProgramFromSources(gl, [vs, fs]);\r\n  let positionLocation = gl.getAttribLocation(program, \"a_position\");\r\n  let viewProjectionLocation = gl.getUniformLocation(\r\n    program,\r\n    \"u_wvProjectionMatrix\"\r\n  );\r\n\r\n  let vao = gl.createVertexArray();\r\n  gl.bindVertexArray(vao);\r\n\r\n  const sphere = sphereVertIndices();\r\n\r\n  let positionBufferr = gl.createBuffer();\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBufferr);\r\n  gl.bufferData(\r\n    gl.ARRAY_BUFFER,\r\n    new Uint16Array([...sphere[0]]),\r\n    gl.STATIC_DRAW\r\n  );\r\n  gl.enableVertexAttribArray(positionLocation);\r\n  gl.vertexAttribPointer(positionLocation, 3, gl.FLOAT, false, 0, 0);\r\n\r\n  // let ballTexture = gl.createTexture();\r\n  // gl.bindTexture(gl.TEXTURE_2D, ballTexture);\r\n  // gl.textImage2D(gl.TEXTURE_2D, 0, gl.RGBA);\r\n  // put color as a texture at first\r\n  // load an image as a texture\r\n\r\n  // revolve an object around x axis\r\n\r\n  function degToRadian(deg) {\r\n    return (Math.PI / 180) * deg;\r\n  }\r\n\r\n  function radToDegree(rad) {\r\n    return (180 / Math.PI) * rad;\r\n  }\r\n\r\n  function initialCameraSetup(cameraPosition, up) {\r\n    let cameraMatrix = m4.lookAt(cameraPosition, [1, 0, 0], up);\r\n    return cameraMatrix;\r\n  }\r\n\r\n  let cameraDegree = 0;\r\n\r\n  function drawScene() {\r\n    webglUtils.resizeCanvasToDisplaySize(gl.canvas);\r\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n\r\n    gl.clearColor(0.5, 0.5, 0.5, 0.5);\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.enable(gl.BLEND);\r\n\r\n    gl.useProgram(program);\r\n    gl.bindVertexArray(vao);\r\n    cameraDegree += 0.4;\r\n    let cameraRadian = degToRadian(cameraDegree);\r\n    let cameraMatrix = m4.yRotation(cameraRadian);\r\n    cameraMatrix = m4.translate(cameraMatrix, 0.0, 0.0, 1.5);\r\n\r\n    cameraPosition = [cameraMatrix[12], cameraMatrix[13], cameraMatrix[14]];\r\n    // cameraPosition = [0.5, 2.0, 1.5];\r\n    cameraMatrix = initialCameraSetup(cameraPosition, up);\r\n    viewMatrix = m4.inverse(cameraMatrix);\r\n\r\n    let aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    let fieldofView = degToRadian(60);\r\n    let projectionMatrix = m4.perspective(fieldofView, aspect, 0.01, 1000);\r\n\r\n    let indicesBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indicesBuffer);\r\n    gl.bufferData(\r\n      gl.ELEMENT_ARRAY_BUFFER,\r\n      new Uint32Array([...sphere[1]]),\r\n      gl.STATIC_DRAW\r\n    );\r\n\r\n    let vProjectionMatrix = m4.multiply(projectionMatrix, viewMatrix);\r\n    gl.uniformMatrix4fv(viewProjectionLocation, false, vProjectionMatrix);\r\n    gl.drawElements(gl.TRIANGLES, sphere[1].length, gl.UNSIGNED_INT, 0);\r\n    window.requestAnimationFrame(drawScene);\r\n  }\r\n\r\n  requestAnimationFrame(drawScene);\r\n})();\r\n"]}