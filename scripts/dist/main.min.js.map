{"version":3,"sources":["main.js"],"names":["cubePosition","up","vs","viewProjectionLocation","gl","document","querySelector","radToDegree","program","cameraMatrix","createProgramFromSources","fs","positionLocation","getAttribLocation","getUniformLocation","cameraPosition","initialCameraSetup","positionBufferr","createBuffer","bindBuffer","drawScene","webglUtils","viewport","clearColor","clear","FLOAT","cameraRadian","degToRadian","m4","yRotation","translate","lookAt","viewMatrix","inverse","resizeCanvasToDisplaySize","canvas","width","height","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","enable","CULL_FACE","DEPTH_TEST","BLEND","useProgram","bindVertexArray","vao","aspect","clientWidth","clientHeight","fieldofView","projectionMatrix","perspective","vProjectionMatrix","multiply","uniformMatrix4fv","drawArrays","TRIANGLE_STRIP","length","console","log"],"mappings":"aAAA,IAAAA,aAAA,CAGE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAD7E,EAAMA,EAAAA,EAAAA,EAAAA,EAAY,EAChB,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAKrBC,GAAA,CAAA,EAAA,EAAA,GAAFC,GAAE,sOAiCFC,GAAAA,0KAoBH,WA7BD,IA+BAC,EA/BeC,SAASC,cAAc,gBA+B7BC,WAAiB,UACxB,GAAAH,EAAA,CAKA,IAAAI,EAAOC,WAAPC,yBAAAN,EAAA,CAAAF,GAAAS,KACDC,EAAAR,EAAAS,kBAAAL,EAAA,cA7BGL,EAAyBC,EAAGU,mBA+BhCN,EACA,wBAIAO,EAAAA,EAAAA,oBACAN,EAAAA,gBAAeO,GA7Bf,IAAIC,EAAkBb,EAAGc,eAgCzBd,EAAAe,WAASC,EAAAA,aAAYH,GACnBI,EAAAA,WACAjB,EAAGkB,aAEHlB,IAAGmB,aAAHvB,cACAI,EAAGoB,aAEHpB,EAAAA,wBAAAQ,GACAR,EAAAA,oBAAAQ,EAAA,EAAAR,EAAAqB,OAAA,EAAA,EAAA,GAjBF,IAL4BV,EAAgBd,EAKxCyB,EAAeC,EAAY,GAC3BlB,EAAemB,GAAGC,UAAUH,GAChCjB,EAAemB,GAAGE,UAAUrB,EAAc,GAAK,GAAK,KAEpDM,eAAiB,CAACN,EAAa,IAAKA,EAAa,IAAKA,EAAa,KACnEM,eAAiB,CAAC,IAAM,EAAK,KAVDA,EAWMA,eAXUd,EAWMA,GAAlDQ,EAyBSmB,GAAAG,OAAAhB,EAAA,CAAA,EAAA,EAAA,GAAAd,GAxBT+B,WAAaJ,GAAGK,QAAQxB,GAExB,WACEY,WAAWa,0BAA0B9B,EAAG+B,QACxC/B,EAAGkB,SAAS,EAAG,EAAGlB,EAAG+B,OAAOC,MAAOhC,EAAG+B,OAAOE,QAE7CjC,EAAGmB,WAAW,GAAK,GAAK,GAAK,IAC7BnB,EAAGoB,MAAMpB,EAAGkC,iBAAmBlC,EAAGmC,kBAClCnC,EAAGoC,OAAOpC,EAAGqC,WACbrC,EAAGoC,OAAOpC,EAAGsC,YACbtC,EAAGoC,OAAOpC,EAAGuC,OAEbvC,EAAGwC,WAAWpC,GACdJ,EAAGyC,gBAAgBC,GAEnB,IAAIC,EAAS3C,EAAG+B,OAAOa,YAAc5C,EAAG+B,OAAOc,aAC3CC,EAAcvB,EAAY,IAC1BwB,EAAmBvB,GAAGwB,YAAYF,EAAaH,EAAQ,IAAM,KAE7DM,EAAoBzB,GAAG0B,SAASH,EAAkBnB,YACtD5B,EAAGmD,iBAAiBpD,GAAwB,EAAOkD,GACnDjD,EAAGoD,WAAWpD,EAAGqD,eAAgB,EAAGzD,aAAa0D,OAAS,GAG5DtC,QAtCCuC,QAAAC,IAAA,oBA2BCxD,SAAGyC,EAAgBC,GAEnB,OAAIC,KAAS3C,GAAG+B,IAAOa,GAjCxB","file":"main.min.js","sourcesContent":["`use strict`;\r\n\r\nconst cubePosition = [\r\n  1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0,\r\n  0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0,\r\n];\r\nconst up = [0, 1, 0];\r\n\r\nconst vs = `#version 300 es\r\n    in vec3 a_position;\r\n    in float a_textureCordinate;\r\n    \r\n    uniform mat4 u_wvProjectionMatrix;\r\n\r\n    void main(){\r\n        gl_Position =  u_wvProjectionMatrix* vec4(a_position, 1.0);\r\n       \r\n    }\r\n`;\r\n\r\nconst fs = `#version 300 es\r\n        precision highp float;\r\n\r\n        out vec4 outColor;\r\n\r\n        void main(){\r\n            outColor = vec4(0.0, 0.8, 0.0, 0.8);\r\n        }\r\n\r\n`;\r\n\r\n(function () {\r\n  const canvas = document.querySelector(\"#main-canvas\");\r\n  let gl = canvas.getContext(\"webgl2\");\r\n  if (!gl) {\r\n    console.log(\"webgl2 not found\");\r\n    return;\r\n  }\r\n\r\n  let program = webglUtils.createProgramFromSources(gl, [vs, fs]);\r\n  let positionLocation = gl.getAttribLocation(program, \"a_position\");\r\n  let viewProjectionLocation = gl.getUniformLocation(\r\n    program,\r\n    \"u_wvProjectionMatrix\"\r\n  );\r\n\r\n  let vao = gl.createVertexArray();\r\n  gl.bindVertexArray(vao);\r\n\r\n  let positionBufferr = gl.createBuffer();\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBufferr);\r\n  gl.bufferData(\r\n    gl.ARRAY_BUFFER,\r\n    new Float32Array(cubePosition),\r\n    gl.STATIC_DRAW\r\n  );\r\n  gl.enableVertexAttribArray(positionLocation);\r\n  gl.vertexAttribPointer(positionLocation, 3, gl.FLOAT, false, 0, 0);\r\n\r\n  function degToRadian(deg) {\r\n    return (Math.PI / 180) * deg;\r\n  }\r\n\r\n  function radToDegree(rad) {\r\n    return (180 / Math.PI) * rad;\r\n  }\r\n\r\n  function initialCameraSetup(cameraPosition, up) {\r\n    let cameraMatrix = m4.lookAt(cameraPosition, [1, 0, 0], up);\r\n    return cameraMatrix;\r\n  }\r\n\r\n  let cameraRadian = degToRadian(0);\r\n  let cameraMatrix = m4.yRotation(cameraRadian);\r\n  cameraMatrix = m4.translate(cameraMatrix, 0.5, 0.5, 1.5);\r\n\r\n  cameraPosition = [cameraMatrix[12], cameraMatrix[13], cameraMatrix[14]];\r\n  cameraPosition = [0.5, -1.0, 1.5];\r\n  cameraMatrix = initialCameraSetup(cameraPosition, up);\r\n  viewMatrix = m4.inverse(cameraMatrix);\r\n\r\n  function drawScene() {\r\n    webglUtils.resizeCanvasToDisplaySize(gl.canvas);\r\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n\r\n    gl.clearColor(0.5, 0.5, 0.5, 0.5);\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.enable(gl.BLEND);\r\n\r\n    gl.useProgram(program);\r\n    gl.bindVertexArray(vao);\r\n\r\n    let aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    let fieldofView = degToRadian(60);\r\n    let projectionMatrix = m4.perspective(fieldofView, aspect, 0.01, 1000);\r\n\r\n    let vProjectionMatrix = m4.multiply(projectionMatrix, viewMatrix);\r\n    gl.uniformMatrix4fv(viewProjectionLocation, false, vProjectionMatrix);\r\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, cubePosition.length / 3);\r\n  }\r\n\r\n  drawScene();\r\n})();\r\n"]}