{"version":3,"sources":["main.js"],"names":["cubePosition","up","vs","bindVertexArray","gl","document","querySelector","initialCameraSetup","program","webglUtils","createProgramFromSources","fs","positionLocation","getAttribLocation","resizeCanvasToDisplaySize","vao","enable","BLEND","positionBufferr","createBuffer","bindBuffer","cameraRadian","degToRadian","bufferData","cameraMatrix","cameraPosition","STATIC_DRAW","viewMatrix","vertexAttribPointer","canvas","clientHeight","cameraDegree","setInterval","drawScene","console","projectionMatrix","vProjectionMatrix","m4","viewport","width","height","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","CULL_FACE","DEPTH_TEST","useProgram","yRotation","translate","lookAt","inverse","aspect","clientWidth","fieldofView","perspective","multiply","uniformMatrix4fv","viewProjectionLocation","drawArrays","TRIANGLE_STRIP","length"],"mappings":"aAAA,IAAAA,aAAA,CAGE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAD7E,EAAMA,EAAAA,EAAAA,EAAAA,EAAY,EAChB,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAKrBC,GAAA,CAAA,EAAA,EAAA,GAAFC,GAAE,gUA2CHC,GAAAA,iMAkBF,WAjCD,IAmCAC,EAnCeC,SAASC,cAAc,gBAmC7BC,WAAT,UACE,GAAAH,EAAA,CA7BF,IAAII,EAAUC,WAAWC,yBAAyBN,EAAI,CAACF,GAAIS,KAmC3DC,EAAqBR,EAAAS,kBAAAL,EAAA,cACnBC,EAAWK,EAAAA,mBACXV,EAEAA,wBAGEW,EAACC,EAAOZ,oBACVA,EAAAA,gBAAaa,GAGbb,IAAEc,EAAiBH,EAAnBI,eAEAf,EAAAgB,WAAIC,EAAAA,aAAeC,GACnBlB,EAAAmB,WACAC,EAAAA,aAEAC,IAAAA,aAAiBzB,cArCjBI,EAAGsB,aAwCHC,EAAAA,wBAAwBH,GAExBpB,EAAAwB,oBAAgBC,EAAuB,EAACA,EAAAA,OAAOC,EAA/C,EAAA,GAxBF,IAAIC,EAAe,EAiCnBC,YAAY,WACVD,IACAE,KACC,KAEHA,SAzCEC,QAAOV,IAAAA,oBA6BP,SAAIW,EAAAA,GAEJ,OAAIC,KAAAA,GAAAA,IAAoBC,EA1B1B,SAASJ,IACPxB,WAAWK,0BAA0BV,EAAGyB,QACxCzB,EAAGkC,SAAS,EAAG,EAAGlC,EAAGyB,OAAOU,MAAOnC,EAAGyB,OAAOW,QAE7CpC,EAAGqC,WAAW,GAAK,GAAK,GAAK,IAC7BrC,EAAGsC,MAAMtC,EAAGuC,iBAAmBvC,EAAGwC,kBAClCxC,EAAGY,OAAOZ,EAAGyC,WACbzC,EAAGY,OAAOZ,EAAG0C,YACb1C,EAAGY,OAAOZ,EAAGa,OAEbb,EAAG2C,WAAWvC,GACdJ,EAAGD,gBAAgBY,GAEnB,IAAIM,EAAeC,EAAYS,GAC3BP,EAAea,GAAGW,UAAU3B,GAChCG,EAAea,GAAGY,UAAUzB,EAAc,EAAK,EAAK,KAEpDC,eAAiB,CAACD,EAAa,IAAKA,EAAa,IAAKA,EAAa,KAEnEA,EAcAS,SAASR,EAAAxB,GAGXgC,OALAI,GAAAa,OAAAzB,EAAA,CAAA,EAAA,EAAA,GAAAxB,GAZiBM,CAAmBkB,eAAgBxB,IAClD0B,WAAaU,GAAGc,QAAQ3B,GAExB,IAAI4B,EAAShD,EAAGyB,OAAOwB,YAAcjD,EAAGyB,OAAOC,aAC3CwB,EAAchC,EAAY,IAC1Ba,EAAmBE,GAAGkB,YAAYD,EAAaF,EAAQ,IAAM,KAE7DhB,EAAoBC,GAAGmB,SAASrB,EAAkBR,YACtDvB,EAAGqD,iBAAiBC,GAAwB,EAAOtB,GACnDhC,EAAGuD,WAAWvD,EAAGwD,eAAgB,EAAG5D,aAAa6D,OAAS,IArC3D","file":"main.min.js","sourcesContent":["`use strict`;\r\n\r\nconst cubePosition = [\r\n  1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0,\r\n  0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0,\r\n];\r\nconst up = [0, 1, 0];\r\n\r\nconst vs = `#version 300 es\r\n    in vec3 a_position;\r\n    in float a_textureCordinate;\r\n    \r\n    uniform mat4 u_wvProjectionMatrix;\r\n\r\n    out vec4 fragmentColor;\r\n\r\n    void main(){\r\n        gl_Position =  u_wvProjectionMatrix* vec4((2.0*a_position)- vec3(1.0, 1.0, 1.0), 1.0);\r\n        fragmentColor = gl_Position;   \r\n    }\r\n`;\r\n\r\nconst fs = `#version 300 es\r\n        precision highp float;\r\n\r\n        in vec4 fragmentColor;\r\n\r\n        out vec4 outColor;\r\n\r\n        void main(){\r\n            outColor = fragmentColor;\r\n        }\r\n\r\n`;\r\n\r\n(function () {\r\n  const canvas = document.querySelector(\"#main-canvas\");\r\n  let gl = canvas.getContext(\"webgl2\");\r\n  if (!gl) {\r\n    console.log(\"webgl2 not found\");\r\n    return;\r\n  }\r\n\r\n  let program = webglUtils.createProgramFromSources(gl, [vs, fs]);\r\n  let positionLocation = gl.getAttribLocation(program, \"a_position\");\r\n  let viewProjectionLocation = gl.getUniformLocation(\r\n    program,\r\n    \"u_wvProjectionMatrix\"\r\n  );\r\n\r\n  let vao = gl.createVertexArray();\r\n  gl.bindVertexArray(vao);\r\n\r\n  let positionBufferr = gl.createBuffer();\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBufferr);\r\n  gl.bufferData(\r\n    gl.ARRAY_BUFFER,\r\n    new Float32Array(cubePosition),\r\n    gl.STATIC_DRAW\r\n  );\r\n  gl.enableVertexAttribArray(positionLocation);\r\n  gl.vertexAttribPointer(positionLocation, 3, gl.FLOAT, false, 0, 0);\r\n\r\n  function degToRadian(deg) {\r\n    return (Math.PI / 180) * deg;\r\n  }\r\n\r\n  function radToDegree(rad) {\r\n    return (180 / Math.PI) * rad;\r\n  }\r\n\r\n  function initialCameraSetup(cameraPosition, up) {\r\n    let cameraMatrix = m4.lookAt(cameraPosition, [1, 0, 0], up);\r\n    return cameraMatrix;\r\n  }\r\n\r\n  let cameraDegree = 0;\r\n\r\n  function drawScene() {\r\n    webglUtils.resizeCanvasToDisplaySize(gl.canvas);\r\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n\r\n    gl.clearColor(0.5, 0.5, 0.5, 0.5);\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.enable(gl.BLEND);\r\n\r\n    gl.useProgram(program);\r\n    gl.bindVertexArray(vao);\r\n\r\n    let cameraRadian = degToRadian(cameraDegree);\r\n    let cameraMatrix = m4.yRotation(cameraRadian);\r\n    cameraMatrix = m4.translate(cameraMatrix, 0.0, 0.0, 1.5);\r\n\r\n    cameraPosition = [cameraMatrix[12], cameraMatrix[13], cameraMatrix[14]];\r\n    // cameraPosition = [0.5, 2.0, 1.5];\r\n    cameraMatrix = initialCameraSetup(cameraPosition, up);\r\n    viewMatrix = m4.inverse(cameraMatrix);\r\n\r\n    let aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    let fieldofView = degToRadian(60);\r\n    let projectionMatrix = m4.perspective(fieldofView, aspect, 0.01, 1000);\r\n\r\n    let vProjectionMatrix = m4.multiply(projectionMatrix, viewMatrix);\r\n    gl.uniformMatrix4fv(viewProjectionLocation, false, vProjectionMatrix);\r\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, cubePosition.length / 3);\r\n  }\r\n\r\n  setInterval(() => {\r\n    cameraDegree++;\r\n    drawScene();\r\n  }, 200);\r\n\r\n  drawScene();\r\n})();\r\n"]}