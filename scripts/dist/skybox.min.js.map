{"version":3,"sources":["skybox.js"],"names":["gl","document","getElementById","getContext","createProgramFromSources","vsSkybox","fsSkybox","modelLocation","bindVertexArray","VPuniformLocation","bindBuffer","ARRAY_BUFFER","programSkybox","bufferData","Float32Array","cubePosition","enableVertexAttribArray","apositionLocation","cameraAngle","createBuffer","positionBuffer","webglUtils","viewport","clearColor","DEPTH_TEST","FLOAT","modelMatrix","resizeCanvasToDisplaySize","canvas","uniformMatrix4fv","m4","yRotation","camera","translate","DEPTH_BUFFER_BIT","enable","Math","aspectRatio","projectionMatrix","useProgram","vao","window","requestAnimationFrame","viewMatrix","inverse","fov","clientWidth","clientHeight","perspective","multiply","drawArrays","TRIANGLE_STRIP","length","draw"],"mappings":"cAAA,WACE,IADDA,EACcC,SAASC,eAAe,eAD1BC,WAAA,UAEPH,EAAYG,WAAWC,yBAA3BJ,EAAA,CAEAK,SAKAC,WAIIC,EAAAA,EAAAA,oBACJP,EAAAQ,gBAAIC,GAGJT,IAAGU,EAAcC,EAAAA,kBAAjBC,EAAA,cACGC,EACEF,EAAAA,mBACCG,EAAaC,iBAIhBC,EAAAA,EAAwBC,mBAA3BL,EAAA,cAGIM,EAAJlB,EAAAmB,eAVAnB,EAAGU,WAAWV,EAAGW,aAAcS,GAY/BpB,EAAAa,WACEQ,EAAAA,aACArB,IAAGsB,aAAHP,cAEAf,EAAGuB,aAIHvB,EAAAA,wBAAAiB,GACAjB,EAAAA,oBAAawB,EAAb,EAAAxB,EAAAyB,OAAA,EAAA,EAAA,GAGAzB,IAAEkB,EAACV,EAGH,SAAIkB,IACJA,WAAWC,0BAAgBD,EAAaE,QACxC5B,EAAG6B,SAAAA,EAAAA,EAAAA,EAAiBtB,OAAAA,MAAeP,EAAA4B,OAAOF,QAG1C1B,EAAAuB,WAAaO,EAAGC,EAAAA,EAAUb,GAC1Bc,EAAAA,MAASF,EAAGG,iBAAkBjC,EAArBkC,kBAGTlC,EAAAmC,OAAUC,EAAAA,WACVpC,EAAAmC,OAAIE,EAAAA,OACJrC,EAAAmC,OAAIG,EAAAA,YAKJtC,EAAAuC,WAAA3B,GACAZ,EAAAQ,gBAAAgC,GAEA,IACAd,EAAAI,GAAAC,UADA,GAEAL,EAAAI,GAAAG,UAAAP,EAAA,GAAA,EAAA,GAnBA1B,EAAG6B,iBAAiBtB,GAAe,EAAOmB,GAuB1C1B,GAAcA,IACdyC,IAAAA,EAAOC,GAAAA,UAAAA,GACRV,EAAAF,GAAAG,UAAAD,EAAA,EAAA,EAAA,KApBC,IAAIW,EAAab,GAAGc,QAAQZ,GAuBxBa,EAACH,KAAAA,GAAAA,EA1ETL,EAAArC,EAAA4B,OAAAkB,YAAA9C,EAAA4B,OAAAmB,aAuDQT,EAAmBR,GAAGkB,YAAYH,EAAKR,EAAa,GAAK,KAE7DC,EAAmBR,GAAGmB,SAASX,EAAkBK,GAUjD3C,EAAG6B,iBAAiBpB,GAAmB,EAAO6B,GAE9CtC,EAAGkD,WAAWlD,EAAGmD,eAAgB,EAAGpC,aAAaqC,OAAS,GAC1DX,OAAOC,sBAAsBW,GAG/BA,IACAZ,OAAOC,sBAAsBW,GA1E/B","file":"skybox.min.js","sourcesContent":["(function () {\r\n  let canvas = document.getElementById(\"main-canvas\");\r\n  let gl = canvas.getContext(\"webgl2\");\r\n\r\n  let programSkybox = webglUtils.createProgramFromSources(gl, [\r\n    vsSkybox,\r\n    fsSkybox,\r\n  ]);\r\n\r\n  let vao = gl.createVertexArray();\r\n  gl.bindVertexArray(vao);\r\n\r\n  let apositionLocation = gl.getAttribLocation(programSkybox, \"a_position\");\r\n  let modelLocation = gl.getUniformLocation(programSkybox, \"u_modelMatrix\");\r\n  let VPuniformLocation = gl.getUniformLocation(programSkybox, \"u_VPmatrix\");\r\n\r\n  let positionBuffer = gl.createBuffer();\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n  gl.bufferData(\r\n    gl.ARRAY_BUFFER,\r\n    new Float32Array(cubePosition),\r\n    gl.STATIC_DRAW\r\n  );\r\n\r\n  gl.enableVertexAttribArray(apositionLocation);\r\n  gl.vertexAttribPointer(apositionLocation, 3, gl.FLOAT, false, 0, 0);\r\n\r\n  let cameraAngle = 0;\r\n\r\n  function draw() {\r\n    webglUtils.resizeCanvasToDisplaySize(gl.canvas);\r\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n\r\n    gl.clearColor(1.0, 1.0, 1.0, 1.0);\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.enable(gl.BLEND);\r\n    gl.enable(gl.DEPTH_TEST);\r\n\r\n    gl.useProgram(programSkybox);\r\n    gl.bindVertexArray(vao);\r\n\r\n    let modelAngle = 0;\r\n    let modelMatrix = m4.yRotation(modelAngle);\r\n    modelMatrix = m4.translate(modelMatrix, 0.5, 0.0, 0.0);\r\n    gl.uniformMatrix4fv(modelLocation, false, modelMatrix);\r\n\r\n    cameraAngle += 0.01;\r\n    let camera = m4.yRotation(cameraAngle);\r\n    camera = m4.translate(camera, 0.0, 0.0, 4.5);\r\n    let viewMatrix = m4.inverse(camera);\r\n\r\n    let fov = Math.PI / 3.0;\r\n    let aspectRatio = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    let projectionMatrix = m4.perspective(fov, aspectRatio, 0.1, 1000);\r\n\r\n    projectionMatrix = m4.multiply(projectionMatrix, viewMatrix);\r\n\r\n    // let indicesBuffer = gl.createBuffer();\r\n    // gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indicesBuffer);\r\n    // gl.bufferData(\r\n    //   gl.ELEMENT_ARRAY_BUFFER,\r\n    //   new Uint8Array(indexArray),\r\n    //   gl.STATIC_DRAW\r\n    // );\r\n\r\n    gl.uniformMatrix4fv(VPuniformLocation, false, projectionMatrix);\r\n\r\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, cubePosition.length / 3);\r\n    window.requestAnimationFrame(draw);\r\n  }\r\n\r\n  draw();\r\n  window.requestAnimationFrame(draw);\r\n})();\r\n"]}