{"version":3,"sources":["main.js"],"names":["cubePosition","vs","fs","canvas","document","querySelector","gl","getContext","console","log","program","webglUtils","createProgramFromSources","positionLocation","getAttributeLocation","wvProjectionMatrixLocation","getUniformLocation","vao","createVertexArray","bindVertexArray","positionBufferr","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","degToRadian","deg","Math","PI","radToDegree","rad","drawScene"],"mappings":";;AAAA;;AAEA,IAAMA,YAAY,GAAG,CACnB,CADmB,EAChB,CADgB,EACb,CADa,EACV,CADU,EACP,CADO,EACJ,CADI,EACD,CADC,EACE,CADF,EACK,CADL,EACQ,CADR,EACW,CADX,EACc,CADd,EACiB,CADjB,EACoB,CADpB,EACuB,CADvB,EAC0B,CAD1B,EAC6B,CAD7B,EACgC,CADhC,EACmC,CADnC,EACsC,CADtC,EACyC,CADzC,EAC4C,CAD5C,EAC+C,CAD/C,EACkD,CADlD,EACqD,CADrD,EACwD,CADxD,EAEnB,CAFmB,EAEhB,CAFgB,EAEb,CAFa,EAEV,CAFU,EAEP,CAFO,EAEJ,CAFI,EAED,CAFC,EAEE,CAFF,EAEK,CAFL,EAEQ,CAFR,EAEW,CAFX,EAEc,CAFd,EAEiB,CAFjB,EAEoB,CAFpB,EAEuB,CAFvB,EAE0B,CAF1B,CAArB;AAKA,IAAMC,EAAE,4QAAR;AAcA,IAAMC,EAAE,2KAAR;;AAWA,CAAC,YAAY;AACX,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,cAAvB,CAAf;AACA,MAAIC,EAAE,GAAGH,MAAM,CAACI,UAAP,CAAkB,QAAlB,CAAT;;AACA,MAAI,CAACD,EAAL,EAAS;AACPE,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA;AACD,GANU,CAOX;;;AACA,MAAIC,OAAO,GAAGC,UAAU,CAACC,wBAAX,CAAoCN,EAApC,EAAwC,CAACL,EAAD,EAAKC,EAAL,CAAxC,CAAd,CARW,CASX;;AACA,MAAIW,gBAAgB,GAAGF,UAAU,CAACG,oBAAX,CAAgCJ,OAAhC,EAAyC,YAAzC,CAAvB;AACA,MAAIK,0BAA0B,GAAGJ,UAAU,CAACK,kBAAX,CAC/BN,OAD+B,EAE/B,sBAF+B,CAAjC,CAXW,CAgBX;;AACA,MAAIO,GAAG,GAAGX,EAAE,CAACY,iBAAH,EAAV;AACAZ,EAAAA,EAAE,CAACa,eAAH,CAAmBF,GAAnB,EAlBW,CAoBX;;AACA,MAAIG,eAAe,GAAGd,EAAE,CAACe,YAAH,EAAtB;AACAf,EAAAA,EAAE,CAACgB,UAAH,CAAchB,EAAE,CAACiB,YAAjB,EAA+BH,eAA/B;AACAd,EAAAA,EAAE,CAACkB,UAAH,CACElB,EAAE,CAACiB,YADL,EAEE,IAAIE,YAAJ,CAAiBzB,YAAjB,CAFF,EAGEM,EAAE,CAACoB,WAHL;AAKApB,EAAAA,EAAE,CAACqB,uBAAH,CAA2Bd,gBAA3B;AACAP,EAAAA,EAAE,CAACsB,mBAAH,CAAuBf,gBAAvB,EAAyC,CAAzC,EAA4C,CAA5C,EAA+C,KAA/C,EAAsD,CAAtD,EAAyD,CAAzD,EA7BW,CA8BX;AAEA;;AAEA,WAASgB,WAAT,CAAqBC,GAArB,EAA0B;AACxB,WAAQC,IAAI,CAACC,EAAL,GAAU,GAAX,GAAkBF,GAAzB;AACD;;AAED,WAASG,WAAT,CAAqBC,GAArB,EAA0B;AACxB,WAAQ,MAAMH,IAAI,CAACC,EAAZ,GAAkBE,GAAzB;AACD,GAxCU,CA0CX;AAEA;AAEA;;;AAEA,WAASC,SAAT,GAAqB,CACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AACF,CA3DD","sourcesContent":["`use strict`;\r\n\r\nconst cubePosition = [\r\n  1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0,\r\n  0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0,\r\n];\r\n\r\nconst vs = `#version 300 es\r\n    in vec3 a_position;\r\n    in float a_textureCordinate;\r\n    \r\n    // create sampler\r\n    \r\n    uniform mat4 u_wvProjectionMatrix;\r\n\r\n    function main(){\r\n        vec4 gl_Position = multiply viewMatrix *vec4(a_position, 1.0);\r\n       \r\n    }\r\n`;\r\n\r\nconst fs = `#version 300 es\r\n        precision highp float;\r\n\r\n        out vec4 outColor;\r\n\r\n        void main(){\r\n            outColor = vec3(0.5, 0.8, 1.0, 1.0);\r\n        }\r\n\r\n`;\r\n\r\n(function () {\r\n  const canvas = document.querySelector(\"#main-canvas\");\r\n  let gl = canvas.getContext(\"webgl2\");\r\n  if (!gl) {\r\n    console.log(\"webgl2 not found\");\r\n    return;\r\n  }\r\n  // create a program\r\n  let program = webglUtils.createProgramFromSources(gl, [vs, fs]);\r\n  // find position of all the attribute;\r\n  let positionLocation = webglUtils.getAttributeLocation(program, \"a_position\");\r\n  let wvProjectionMatrixLocation = webglUtils.getUniformLocation(\r\n    program,\r\n    \"u_wvProjectionMatrix\"\r\n  );\r\n\r\n  // create a vertex array to store the state of the program\r\n  let vao = gl.createVertexArray();\r\n  gl.bindVertexArray(vao);\r\n\r\n  // change the state and input the value of the attributes with Vertex Buffer Object\r\n  let positionBufferr = gl.createBuffer();\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBufferr);\r\n  gl.bufferData(\r\n    gl.ARRAY_BUFFER,\r\n    new Float32Array(cubePosition),\r\n    gl.STATIC_DRAW\r\n  );\r\n  gl.enableVertexAttribArray(positionLocation);\r\n  gl.vertexAttribPointer(positionLocation, 3, 0, false, 0, 0);\r\n  // calculate and input the uniform value - other than needed in draw scene/updating uniforms\r\n\r\n  // create a utility function\r\n\r\n  function degToRadian(deg) {\r\n    return (Math.PI / 180) * deg;\r\n  }\r\n\r\n  function radToDegree(rad) {\r\n    return (180 / Math.PI) * rad;\r\n  }\r\n\r\n  // call a function drawscene\r\n\r\n  // call drawScene in loop\r\n\r\n  // call the draw calls\r\n\r\n  function drawScene() {\r\n    //handle resized canvas\r\n    // set view port\r\n    // clear color, color buffer and depth buffer\r\n    //enable cullface, depth test and blending\r\n    // specify the active program and VAO\r\n    //update the camera position if needed in the shader\r\n    // since there might be changed aspect, calculate the perspective matrix\r\n    // update the  world view matrix\r\n    // call draw call to draw array\r\n  }\r\n})();\r\n"],"file":"main.dev.js"}