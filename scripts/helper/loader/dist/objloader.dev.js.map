{"version":3,"sources":["objloader.js"],"names":["fetch","response","text","console","log","lines","split","regexKeyword","vertexData","positionCordinate","textureCordinate","normalCordinate","addMethods","v","data","push","vt","vn","f","i","length","line","trim","startsWith","result","exec","keyword","unparsedArgs","datas","slice","handlerFunction","warn"],"mappings":";;;;;;;;;;AAAA,CAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACwBA,KAAK,CAAC,6CAAD,CAD7B;;AAAA;AACOC,UAAAA,QADP;AAAA;AAAA,0CAEoBA,QAAQ,CAACC,IAAT,EAFpB;;AAAA;AAEOA,UAAAA,IAFP;AAGCC,UAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACMG,UAAAA,KAJP,GAIeH,IAAI,CAACI,KAAL,CAAW,IAAX,CAJf;AAKOC,UAAAA,YALP,GAKsB,gBALtB;AAOKC,UAAAA,UAPL,GAOkB;AACfC,YAAAA,iBAAiB,EAAE,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAD,CADJ;AAEfC,YAAAA,gBAAgB,EAAE,EAFH;AAGfC,YAAAA,eAAe,EAAE;AAHF,WAPlB;AAaKC,UAAAA,UAbL,GAakB;AACfC,YAAAA,CADe,aACbC,IADa,EACP;AACNN,cAAAA,UAAU,CAACC,iBAAX,CAA6BM,IAA7B,CAAkCD,IAAlC;AACD,aAHc;AAIfE,YAAAA,EAJe,cAIZF,IAJY,EAIN;AACPN,cAAAA,UAAU,CAACE,gBAAX,CAA4BK,IAA5B,CAAiCD,IAAjC;AACD,aANc;AAOfG,YAAAA,EAPe,cAOZH,IAPY,EAON;AACPN,cAAAA,UAAU,CAACG,eAAX,CAA2BI,IAA3B,CAAgCD,IAAhC;AACD,aATc;AAUfI,YAAAA,CAVe,aAUbJ,IAVa,EAUP,CACN;AACD;AAZc,WAblB;AA4BUK,UAAAA,CA5BV,GA4Bc,CA5Bd,EA4BiBC,MA5BjB,GA4B0B,CA5B1B;;AAAA;AAAA,gBA4B6BD,CAAC,GAAGC,MA5BjC;AAAA;AAAA;AAAA;;AA6BOC,UAAAA,IA7BP,GA6BchB,KAAK,CAACc,CAAD,CAAL,CAASG,IAAT,EA7Bd;;AAAA,gBA8BOD,IAAI,KAAK,EAAT,IAAeA,IAAI,CAACE,UAAL,CAAgB,GAAhB,CA9BtB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAiCOC,UAAAA,MAjCP,GAiCgBjB,YAAY,CAACkB,IAAb,CAAkBJ,IAAlB,CAjChB;;AAAA,cAkCQG,MAlCR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,mCAqCqCA,MArCrC,MAqCYE,OArCZ,eAqCqBC,YArCrB;AAsCOC,UAAAA,KAtCP,GAsCeP,IAAI,CAACf,KAAL,CAAW,KAAX,EAAkBuB,KAAlB,CAAwB,CAAxB,CAtCf;AAuCSC,UAAAA,eAvCT,GAuC2BlB,UAAU,CAACc,OAAD,CAvCrC;;AAwCG,cAAI,CAACI,eAAL,EAAsB;AACpB3B,YAAAA,OAAO,CAAC4B,IAAR,CAAa,oBAAb,EAAmCL,OAAnC;AACD;;AACDI,UAAAA,eAAe,CAACF,KAAD,CAAf;;AA3CH;AA4ByCT,UAAAA,CAAC,EA5B1C;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD","sourcesContent":["(async function () {\r\n  const response = await fetch(\"/game/resources/models/objs/Handgun_obj.obj\");\r\n  const text = await response.text();\r\n  console.log(text);\r\n  const lines = text.split(\"\\n\");\r\n  const regexKeyword = /(w*)(?: )*(.*)/;\r\n\r\n  let vertexData = {\r\n    positionCordinate: [[0, 0, 0]],\r\n    textureCordinate: [],\r\n    normalCordinate: [],\r\n  };\r\n\r\n  let addMethods = {\r\n    v(data) {\r\n      vertexData.positionCordinate.push(data);\r\n    },\r\n    vt(data) {\r\n      vertexData.textureCordinate.push(data);\r\n    },\r\n    vn(data) {\r\n      vertexData.normalCordinate.push(data);\r\n    },\r\n    f(data) {\r\n      // add the data in webgl from vertex data stored\r\n    },\r\n  };\r\n\r\n  for (let i = 0, length = 6; i < length; i++) {\r\n    let line = lines[i].trim();\r\n    if (line === \"\" || line.startsWith(\"#\")) {\r\n      continue;\r\n    }\r\n    let result = regexKeyword.exec(line);\r\n    if (!result) {\r\n      continue;\r\n    }\r\n    const [, keyword, unparsedArgs] = result;\r\n    let datas = line.split(/\\s+/).slice(1);\r\n    const handlerFunction = addMethods[keyword];\r\n    if (!handlerFunction) {\r\n      console.warn(\"identifiec keyword\", keyword);\r\n    }\r\n    handlerFunction(datas);\r\n  }\r\n})();\r\n"],"file":"objloader.dev.js"}