{"version":3,"sources":["objloader.js"],"names":["matLib","objLoader","addVertex","resetGeometry","setGeometry","geometryRange","getRange","geometries","reduce","min","max","attributes","vertexPosition","position","minMax","map","index","Math","Array","fill","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","data","slice","i","length","j","geometry","texCord","normalCord","colorValue","webglData","group","material","push","undefined","indices","split","forEach","vertexData","vertexColor","fetch","response","text","lines","regexKeyword","object","verticesIndices","positionCordinate","textureCordinate","normalCordinate","addMethods","v","vt","vn","f","traingleCount","mtllib","usemtl","o","line","trim","startsWith","result","exec","keyword","unparsedArgs","datas","handlerFunction","console","warn","element","url","URL","window","location","href","materialURL"],"mappings":"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","sourcesContent":["const matLib = [];\r\n\r\nasync function objLoader() {\r\n  const response = await fetch(\"/game/resources/models/objs/Chair/Chair.obj\");\r\n  const text = await response.text();\r\n  const lines = text.split(\"\\n\");\r\n  const regexKeyword = /(\\w*)(?: )*(.*)/;\r\n  let material = \"basic\";\r\n  let object = \"default\";\r\n  let group = \"\";\r\n  let verticesIndices = [];\r\n\r\n  let geometries = [];\r\n  let geometry;\r\n\r\n  let webglData = [[], [], [], []];\r\n\r\n  let positionCordinate = [[0, 0, 0]];\r\n  let textureCordinate = [[0, 0]];\r\n  let normalCordinate = [[0, 0, 0]];\r\n  let vertexColor = [[0, 0, 0]];\r\n\r\n  let vertexData = [\r\n    positionCordinate,\r\n    textureCordinate,\r\n    normalCordinate,\r\n    vertexColor,\r\n  ];\r\n\r\n  function addVertex(data) {\r\n    let indices = data.split(\"/\");\r\n    indices.forEach((index, i) => {\r\n      if (!index) {\r\n        return;\r\n      }\r\n      index = index > 0 ? index : index + vertexData[i].length;\r\n      webglData[i].push(...vertexData[i][index]);\r\n      // add color value of that vertex which is i=0 to the webgl data\r\n      if (i === 0) {\r\n        webglData[3].push(...vertexColor[index]);\r\n      }\r\n    });\r\n  }\r\n\r\n  function resetGeometry() {\r\n    if (geometry) {\r\n      geometry = undefined;\r\n    }\r\n  }\r\n\r\n  function setGeometry() {\r\n    if (!geometry) {\r\n      const position = [];\r\n      const texCord = [];\r\n      const normalCord = [];\r\n      const colorValue = [];\r\n      webglData = [position, texCord, normalCord, colorValue];\r\n\r\n      geometry = {\r\n        group,\r\n        material,\r\n        attributes: {\r\n          position,\r\n          texCord,\r\n          normalCord,\r\n          colorValue,\r\n        },\r\n      };\r\n\r\n      geometries.push(geometry);\r\n    }\r\n  }\r\n\r\n  let addMethods = {\r\n    v(data) {\r\n      if (data.length > 3) {\r\n        positionCordinate.push(data.slice(0, 3));\r\n        vertexColor.push(data.slice(3));\r\n      } else {\r\n        positionCordinate.push(data);\r\n        vertexColor.push([1, 1, 1]);\r\n      }\r\n    },\r\n    vt(data) {\r\n      textureCordinate.push(data);\r\n    },\r\n    vn(data) {\r\n      normalCordinate.push(data);\r\n    },\r\n    f(data) {\r\n      setGeometry();\r\n      for (let i = 0, traingleCount = data.length - 2; i < traingleCount; i++) {\r\n        addVertex(data[0]);\r\n        addVertex(data[i + 1]);\r\n        addVertex(data[i + 2]);\r\n      }\r\n    },\r\n    mtllib(data) {\r\n      matLib.push(data);\r\n    },\r\n    usemtl(data) {\r\n      resetGeometry();\r\n      material = data;\r\n    },\r\n    o(data) {\r\n      object = data;\r\n    },\r\n  };\r\n\r\n  function geometryRange(data) {\r\n    let min = data.slice(0, 3);\r\n    let max = data.slice(0, 3);\r\n\r\n    for (let i = 0, length = data.length; i < length; i += 3) {\r\n      for (let j = 0; j < 3; j++) {\r\n        min[j] = Math.min(min[j], data[i + j]);\r\n        max[j] = Math.max(max[j], data[i + j]);\r\n      }\r\n    }\r\n    return { min, max };\r\n  }\r\n\r\n  function getRange(geometries) {\r\n    return geometries.reduce(\r\n      ({ min, max }, { attributes }) => {\r\n        const vertexPosition = attributes.position;\r\n        let minMax = geometryRange(vertexPosition);\r\n        return {\r\n          min: min.map((min, index) => Math.min(min, minMax.min[index])),\r\n          max: max.map((max, index) => Math.max(max, minMax.max[index])),\r\n        };\r\n      },\r\n      {\r\n        min: Array(3).fill(Number.POSITIVE_INFINITY),\r\n        max: Array(3).fill(Number.NEGATIVE_INFINITY),\r\n      }\r\n    );\r\n  }\r\n\r\n  for (let i = 0, length = lines.length; i < length; i++) {\r\n    let line = lines[i].trim();\r\n    if (line === \"\" || line.startsWith(\"#\")) {\r\n      continue;\r\n    }\r\n    let result = regexKeyword.exec(line);\r\n    if (!result) {\r\n      continue;\r\n    }\r\n    const [, keyword, unparsedArgs] = result;\r\n    let datas = line.split(/\\s+/).slice(1);\r\n    const handlerFunction = addMethods[keyword];\r\n    if (!handlerFunction) {\r\n      console.warn(`${keyword} isnot handled by this program`);\r\n      continue;\r\n    }\r\n    handlerFunction(datas);\r\n  }\r\n\r\n  matLib.forEach(async (element, index) => {\r\n    let url = new URL(\"./resources/models/objs/Chair/\", window.location.href);\r\n    let materialURL = new URL(element, url);\r\n    const response = await (await fetch(materialURL)).text();\r\n    const lines = response.split(\"\\n\");\r\n  });\r\n\r\n  for (let i = 0, length = lines.length; i < length; i++) {\r\n    const data = lines[i].trim();\r\n  }\r\n\r\n  let minMax = getRange(geometries);\r\n  return {\r\n    geometries,\r\n    minMax,\r\n  };\r\n}\r\n"],"file":"objloader.dev.js"}