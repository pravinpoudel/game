{"version":3,"sources":["sphere.js"],"names":["numbLatitude","numbLongitude","radius","indices","index","p1","i","j","theta","Math","PI","sintheta","sin","costheta","cos","sinphi","phi","cosinephi","x","vertices","console","log","concat","p0"],"mappings":"aAAA,IAAMA,aAAe,IACfC,cAAgB,IADhBD,OAAAA,GACAC,SAAa,GACbC,QAAN,GAEA,SAAMC,oBAGJ,IAAA,IAuBAC,EAAQC,EAARC,EAAAC,EAvBIH,EAAQ,EAAHE,EAAT,EAAAA,GAAAN,aAAAM,IAAA,CACAE,MAAAF,EAAAG,KAAAC,GAAAV,aAGE,IAAA,IAAIW,EAAWF,KAAKG,IAAIJ,OAFrBK,EAAWP,KAACQ,IAAId,OAEfW,EAAQ,EAAGF,GAAKG,cAApBL,IAAA,CACA,IAAIM,EAAQN,GAAGE,EAASD,KAATE,IAAfT,cAIMc,EAASN,KAAKG,IAAII,GAFnBC,EAAWV,KAAKN,IAAAA,GAEfc,EAAAA,OAAaJ,EAAjBM,EACIA,EAAAA,OAAYR,EAEZS,EAAIhB,OAASS,EAAWM,EAC5BE,SAAQjB,KAASW,EACjBM,SAAQjB,KAASS,EACjBQ,SAASf,KAAWc,GASxB,IALCE,QAAAC,IAAA,mBAAAC,OAAAlB,IAKGmB,EAHJH,EAAQC,EAGIf,GAAZN,aAAA,EAAAM,IAEE,IAAKC,EAAI,EAAGA,GAAKN,cAAeM,IAAhCF,GADFkB,EAASjB,GAAIL,cAAgB,GAAMK,GACrBC,cAAKN,EACfsB,QAAMnB,KAAIH,EACVI,QAAOD,KAAGH,EAIVE,QAAQC,KAAWmB,EAAK,EADxBpB,QAAQC,KAAWC,EACnBF,QAAQC,KAAWmB,EAAK,EAExBpB,QAAQC,KAAWC,EAAnB,EAIH,IAAAE,EAAA,EAAAA,EAAAN,cAAAM,IAEDF,GACEkB,EAAKjB,GAAKL,cAAgB,GAAKM,GADrBA,cAAIN,EACdsB,QAAMnB,KAAIH,EAEVE,QAAQC,KAAWmB,EAEnBpB,QAAQC,KAAWC,EAAnB,EAOF,OAHAe,QAAQC,IAAIE,EAAIlB,GAEhBe,QAAQC,IAARD,mBAAAA,OAAAhB,IACO,CAACe,SAAUhB","file":"sphere.min.js","sourcesContent":["const numbLatitude = 100;\r\nconst numbLongitude = 100;\r\nconst radius = 0.5;\r\nconst vertices = [];\r\nconst indices = [];\r\n\r\nfunction sphereVertIndices() {\r\n  let index = 0;\r\n  let u, v;\r\n  for (let i = 0; i <= numbLatitude; i++) {\r\n    theta = (i * Math.PI) / numbLatitude;\r\n    let sintheta = Math.sin(theta);\r\n    let costheta = Math.cos(theta);\r\n\r\n    for (let j = 0; j <= numbLongitude; j++) {\r\n      let phi = (j * (2.0 * Math.PI)) / numbLongitude;\r\n      let sinphi = Math.sin(phi);\r\n      let cosinephi = Math.cos(phi);\r\n\r\n      let x = radius * sintheta * cosinephi;\r\n      let y = radius * costheta;\r\n      let z = radius * sintheta * sinphi;\r\n      vertices[index++] = x;\r\n      vertices[index++] = y;\r\n      vertices[index++] = z;\r\n    }\r\n  }\r\n\r\n  console.log(`index count1 is ${index}`);\r\n\r\n  index = 0;\r\n  let p0, p1, i, j;\r\n  for (i = 0; i <= numbLatitude - 2; i++) {\r\n    for (j = 0; j <= numbLongitude; j++) {\r\n      p0 = i * (numbLongitude + 1) + j; //remember not j+1;\r\n      p1 = p0 + numbLongitude + 1; //dont forget to add 1;\r\n      indices[index++] = p0;\r\n\r\n      indices[index++] = p1;\r\n      indices[index++] = p0 + 1;\r\n\r\n      indices[index++] = p1;\r\n      indices[index++] = p1 + 1;\r\n      indices[index++] = p0 + 1;\r\n    }\r\n  }\r\n\r\n  for (j = 0; j < numbLongitude; j++) {\r\n    p0 = i * (numbLongitude + 1) + j;\r\n    p1 = p0 + numbLongitude + 1;\r\n    indices[index++] = p0;\r\n\r\n    indices[index++] = p1;\r\n    indices[index++] = p0 + 1;\r\n  }\r\n\r\n  console.log(p0, p1);\r\n\r\n  console.log(`index count2 is ${index}`);\r\n  return [vertices, indices];\r\n}\r\n"]}