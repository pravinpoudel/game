{"version":3,"sources":["sphere.js"],"names":["numbLatitude","numbLongitude","radius","vertices","indices","sphereVertIndices","index","u","v","maxX","i","theta","Math","PI","sintheta","sin","costheta","cos","j","phi","sinphi","cosinephi","x","y","z","console","log","p0","p1"],"mappings":"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","sourcesContent":["const numbLatitude = 100;\r\nconst numbLongitude = 100;\r\nconst radius = 1.0;\r\nconst vertices = [];\r\nconst indices = [];\r\n\r\nfunction sphereVertIndices() {\r\n  let index = 0;\r\n  let u, v;\r\n  let maxX = 0.0;\r\n  for (let i = 0; i <= numbLatitude; i++) {\r\n    theta = (i * Math.PI) / numbLatitude;\r\n    let sintheta = Math.sin(theta);\r\n    let costheta = Math.cos(theta);\r\n\r\n    for (let j = 0; j <= numbLongitude; j++) {\r\n      let phi = (j * (2.0 * Math.PI)) / numbLongitude;\r\n      let sinphi = Math.sin(phi);\r\n      let cosinephi = Math.cos(phi);\r\n\r\n      let x = radius * sintheta * cosinephi;\r\n      let y = radius * costheta;\r\n      let z = radius * sintheta * sinphi;\r\n      vertices[index++] = x;\r\n      vertices[index++] = y;\r\n      vertices[index++] = z;\r\n      if (x < maxX) {\r\n        maxX = x;\r\n      }\r\n    }\r\n  }\r\n  console.log(maxX);\r\n\r\n  console.log(`index count1 is ${index}`);\r\n\r\n  index = 0;\r\n  let p0, p1, i, j;\r\n  for (i = 0; i <= numbLatitude - 2; i++) {\r\n    for (j = 0; j <= numbLongitude; j++) {\r\n      p0 = i * (numbLongitude + 1) + j; //remember not j+1;\r\n      p1 = p0 + numbLongitude + 1; //dont forget to add 1;\r\n      indices[index++] = p0;\r\n\r\n      indices[index++] = p1;\r\n      indices[index++] = p0 + 1;\r\n\r\n      indices[index++] = p1;\r\n      indices[index++] = p1 + 1;\r\n      indices[index++] = p0 + 1;\r\n    }\r\n  }\r\n\r\n  for (j = 0; j < numbLongitude; j++) {\r\n    p0 = i * (numbLongitude + 1) + j;\r\n    p1 = p0 + numbLongitude + 1;\r\n    indices[index++] = p0;\r\n\r\n    indices[index++] = p1;\r\n    indices[index++] = p0 + 1;\r\n  }\r\n\r\n  console.log(p0, p1);\r\n\r\n  console.log(`index count2 is ${index}`);\r\n  return [vertices, indices];\r\n}\r\n"],"file":"sphere.dev.js"}