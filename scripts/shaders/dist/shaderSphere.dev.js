"use strict";

var vs = "#version 300 es\n\n#define M_PI 3.1415926535897932384626433832795\n\nin vec3 a_position;\nin float a_textureCordinate;\n\nuniform mat4 u_ModelMatrix;\nuniform mat4 u_wvProjectionMatrix;\n\nout vec3 vertexCordinate;\nout vec2 uvCordinate;\n\nvoid main(){\n\n    vec3 vertDirection = normalize(vec3(a_position) - vec3(0.0, 0.0, 0.0));\n    float u = atan(vertDirection.x, vertDirection.z)/(2.0*M_PI) + 0.5;\n    float v = 0.5-vertDirection.y ;\n    uvCordinate = vec2(u,v);\n\n    // gl_Position =  u_wvProjectionMatrix* vec4((2.0*a_position)- vec3(1.0, 1.0, 1.0), 1.0);  \n    gl_Position =   vec4(a_position, 1.0);\n    vertexCordinate = 0.5 - a_position;   \n}\n";
var fs = "#version 300 es\n\n\nprecision highp float;\n\nin vec3 vertexCordinate;\nuniform sampler2D u_sphereText;\n\nout vec4 outColor;\nin vec2 uvCordinate;\n\nvoid main(){\n \n    // vec3 vertDirection = normalize(vertexCordinate - vec3(0.0, 0.0, 0.0));\n    // float u = atan(vertDirection.x, vertDirection.z)/(2.0*M_PI) + 0.5;\n    // float v = 0.5-vertDirection.y ;\n\n    outColor = texture(u_sphereText, uvCordinate);\n    // outColor = vec4(0.0, 0.8,  0.0, 1.0);\n}\n\n";
var vsTriangle = "#version 300 es\n    in vec3 a_position;\n    out vec3 varying_color;\n\n    uniform mat4 u_vpMatrix;\n\n    void main(){\n        gl_Position = u_vpMatrix*vec4(a_position, 1.0);\n        varying_color = a_position;\n    }\n";
var fsTriangle = "#version 300 es\n\n    precision mediump float;\n    in vec3 varying_color;\n    uniform mat4 u_model;\n    unfirom mat4 u_VPmatrix;\n\n    out vec4 outColor;\n\n    void main(){\n        outColor = vec4(varying_color, 0.7);\n    }\n";
var vsSkybox = "#version 300 es\nin vec3 a_position;\nout vec3 vertexPosition;\n\nuniform mat4 u_VPmatrix;\nuniform mat4 u_modelMatrix;\n\nvoid main(){\n    gl_Position = u_VPmatrix*(vec4(a_position, 1.0));\n}\n";
var fsSkybox = "#version 300 es\n\nprecision highp float;\n\nin vec3 vertexPosition;\nout vec4 outColor;\n\n\nvoid main(){\n\n    outColor = vec4(0.0, 1.0, 0.0, 1.0);\n    // outColor = texture(sampleCube, vertexPosition);\n}\n";
//# sourceMappingURL=shaderSphere.dev.js.map
