{"version":3,"sources":["index.js"],"names":["canvas","gl","program","positionLocation","vertexColorLocation","modelMatrixLocation","viewProjectionLocation","scaleLocation","_ref","geometries","minMax","minValue","maxValue","range","maxSideLength","vao","modelAngle","bufferLists","cameraMatrix","draw","regeneratorRuntime","async","_context","prev","next","webglUtils","resizeCanvasToDisplaySize","height","DEPTH_TEST","offSet","scaleVector","bindVertexArray","cameraAngle","modelMatrix","distanceScale","clientWidth","clientHeight","projectionMatrix","positionBuffer","perspective","createBuffer","uniform1f","localPosition","geometry","vProjectionMatrix","m4","viewMatrix","bindBuffer","colorBuffer","bufferData","Float32Array","ARRAY_BUFFER","FLOAT","enableVertexAttribArray","yRotation","cameraPosition","document","getElementById","getContext","console","log","abrupt","createProgramFromSources","loader_VS","loader_FS","useProgram","getAttribLocation","getUniformLocation","awrap","sent","viewport","DEPTH_BUFFER_BIT","max","enable","CULL_FACE","clearColor","uniformMatrix4fv","length","map","vertexAttribPointer","STATIC_DRAW","colorValue","vColor","lookAt","inverse","window","requestAnimationFrame","stop"],"mappings":"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","file":"index.min.js","sourcesContent":["(async function () {\r\n  const canvas = document.getElementById(\"main-canvas\");\r\n  let gl = canvas.getContext(\"webgl2\");\r\n  if (!gl) {\r\n    console.log(\"context couldnot be generated\");\r\n    return;\r\n  }\r\n\r\n  let program = webglUtils.createProgramFromSources(gl, [loader_VS, loader_FS]);\r\n  gl.useProgram(program);\r\n\r\n  let positionLocation = gl.getAttribLocation(program, \"a_position\");\r\n  let vertexColorLocation = gl.getAttribLocation(program, \"a_color\");\r\n  let modelMatrixLocation = gl.getUniformLocation(program, \"u_modelMatrix\");\r\n  let viewProjectionLocation = gl.getUniformLocation(program, \"u_vpMatrix\");\r\n  let scaleLocation = gl.getUniformLocation(program, \"u_scale\");\r\n\r\n  // find the range and extend of an object to calculate the offset to properly view the object\r\n\r\n  let { geometries, minMax } = await objLoader();\r\n  let { min: minValue, max: maxValue } = minMax;\r\n  const range = m4.subtractVectors(maxValue, minValue);\r\n  const maxSideLength = m4.length(range);\r\n  const offSet = m4.scaleVector(\r\n    m4.addVectors(minValue, m4.scaleVector(range, 0.5)),\r\n    -1.0\r\n  );\r\n\r\n  // -----------------------------------------------\r\n\r\n  let vao = gl.createVertexArray();\r\n  gl.bindVertexArray(vao);\r\n  let cameraAngle = 0.0;\r\n  let modelAngle = 0.0;\r\n  let distanceScale = 1.1;\r\n\r\n  let bufferLists = geometries.map((geometry) => {\r\n    let positionBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n    let localPosition = geometry.attributes.position;\r\n\r\n    gl.bufferData(\r\n      gl.ARRAY_BUFFER,\r\n      new Float32Array([...localPosition]),\r\n      gl.STATIC_DRAW\r\n    );\r\n\r\n    let colorBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\r\n    let vColor = geometry.attributes.colorValue;\r\n\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vColor), gl.STATIC_DRAW);\r\n\r\n    return {\r\n      positionBuffer,\r\n      colorBuffer,\r\n      length: localPosition.length,\r\n    };\r\n  });\r\n\r\n  let cameraMatrix = m4.yRotation(cameraAngle);\r\n  cameraMatrix = m4.translate(\r\n    cameraMatrix,\r\n    0.0,\r\n    0.0,\r\n    maxSideLength * distanceScale\r\n  );\r\n  cameraPosition = [cameraMatrix[12], cameraMatrix[13], cameraMatrix[14]];\r\n  cameraMatrix = m4.lookAt(cameraPosition, [0.0, 0.0, 0.0], [0.0, 1.0, 0.0]);\r\n  viewMatrix = m4.inverse(cameraMatrix);\r\n\r\n  function draw() {\r\n    webglUtils.resizeCanvasToDisplaySize(gl.canvas);\r\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n\r\n    gl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT);\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.clearColor(0.5, 0.5, 0.5, 0.5);\r\n\r\n    modelAngle += 0.01;\r\n    let modelMatrix = m4.yRotation(modelAngle);\r\n    gl.uniformMatrix4fv(modelMatrixLocation, false, modelMatrix);\r\n\r\n    let aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    let fov = (Math.PI / 180) * 60;\r\n    let projectionMatrix = m4.perspective(fov, aspect, 0.1, 1000);\r\n\r\n    gl.uniform1f(scaleLocation, 0.5);\r\n\r\n    let vProjectionMatrix = m4.multiply(projectionMatrix, viewMatrix);\r\n    gl.uniformMatrix4fv(viewProjectionLocation, false, vProjectionMatrix);\r\n\r\n    bufferLists.forEach(({ positionBuffer, colorBuffer, length }) => {\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n      gl.enableVertexAttribArray(positionLocation);\r\n      gl.vertexAttribPointer(positionLocation, 3, gl.FLOAT, false, 0, 0);\r\n\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\r\n      gl.enableVertexAttribArray(vertexColorLocation);\r\n      gl.vertexAttribPointer(vertexColorLocation, 3, gl.FLOAT, false, 0, 0);\r\n\r\n      gl.drawArrays(gl.TRIANGLES, 0, length / 3);\r\n    });\r\n    window.requestAnimationFrame(draw);\r\n  }\r\n  window.requestAnimationFrame(draw);\r\n})();\r\n"]}