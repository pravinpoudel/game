{"version":3,"sources":["index.js"],"names":["canvas","gl","program","positionLocation","modelMatrixLocation","viewProjectionLocation","scaleLocation","_ref","geometries","minMax","minValue","maxValue","range","maxSideLength","vao","cameraAngle","cameraMatrix","draw","regeneratorRuntime","async","_context","prev","next","webglUtils","viewport","width","height","clear","DEPTH_BUFFER_BIT","COLOR_BUFFER_BIT","enable","DEPTH_TEST","console","CULL_FACE","clearColor","useProgram","getAttribLocation","getUniformLocation","projectionMatrix","m4","perspective","fov","aspect","uniform1f","vProjectionMatrix","multiply","viewMatrix","uniformMatrix4fv","subtractVectors","offSet","scaleVector","addVectors","bufferData","Float32Array","yRotation","translate","FLOAT","cameraPosition","document","getElementById","getContext","log","abrupt","createProgramFromSources","loader_VS","loader_FS","awrap","resizeCanvasToDisplaySize","sent","max","modelAngle","bindVertexArray","bindBuffer","localPosition","geometry","window","lookAt","inverse","requestAnimationFrame","stop"],"mappings":"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","file":"index.min.js","sourcesContent":["(async function () {\r\n  const canvas = document.getElementById(\"main-canvas\");\r\n  let gl = canvas.getContext(\"webgl2\");\r\n  if (!gl) {\r\n    console.log(\"context couldnot be generated\");\r\n    return;\r\n  }\r\n\r\n  let program = webglUtils.createProgramFromSources(gl, [loader_VS, loader_FS]);\r\n  gl.useProgram(program);\r\n\r\n  let positionLocation = gl.getAttribLocation(program, \"a_position\");\r\n  let modelMatrixLocation = gl.getUniformLocation(program, \"u_modelMatrix\");\r\n  let viewProjectionLocation = gl.getUniformLocation(program, \"u_vpMatrix\");\r\n  let scaleLocation = gl.getUniformLocation(program, \"u_scale\");\r\n\r\n  // find the range and extend of an object to calculate the offset to properly view the object\r\n\r\n  let { geometries, minMax } = await objLoader();\r\n  let { min: minValue, max: maxValue } = minMax;\r\n  const range = m4.subtractVectors(maxValue, minValue);\r\n  const maxSideLength = m4.length(range);\r\n  console.log(maxSideLength);\r\n  const offSet = m4.scaleVector(\r\n    m4.addVectors(minValue, m4.scaleVector(range, 0.5)),\r\n    -1.0\r\n  );\r\n\r\n  // -----------------------------------------------\r\n\r\n  let vao = gl.createVertexArray();\r\n  gl.bindVertexArray(vao);\r\n  let cameraAngle = 0.0;\r\n  let modelAngle = 0.0;\r\n  let distanceScale = 1.3;\r\n\r\n  let cameraMatrix = m4.yRotation(cameraAngle);\r\n  cameraMatrix = m4.translate(\r\n    cameraMatrix,\r\n    0.0,\r\n    0.0,\r\n    maxSideLength * distanceScale\r\n  );\r\n  cameraPosition = [cameraMatrix[12], cameraMatrix[13], cameraMatrix[14]];\r\n  cameraMatrix = m4.lookAt(cameraPosition, [0.0, 0.0, 0.0], [0.0, 1.0, 0.0]);\r\n  viewMatrix = m4.inverse(cameraMatrix);\r\n\r\n  function draw() {\r\n    webglUtils.resizeCanvasToDisplaySize(gl.canvas);\r\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n\r\n    gl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT);\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.clearColor(0.5, 0.5, 0.5, 0.5);\r\n\r\n    modelAngle += 0.1;\r\n\r\n    let modelMatrix = m4.yRotation(cameraAngle);\r\n    gl.uniformMatrix4fv(modelMatrixLocation, false, modelMatrix);\r\n\r\n    let aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    let fov = (Math.PI / 180) * 60;\r\n    let projectionMatrix = m4.perspective(fov, aspect, 0.1, 1000);\r\n\r\n    gl.uniform1f(scaleLocation, 0.5);\r\n\r\n    let vProjectionMatrix = m4.multiply(projectionMatrix, viewMatrix);\r\n    gl.uniformMatrix4fv(viewProjectionLocation, false, vProjectionMatrix);\r\n\r\n    let positionBuffer = gl.createBuffer();\r\n\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n\r\n    geometries.forEach((geometry) => {\r\n      let localPosition = geometry.attributes.position;\r\n      gl.bufferData(\r\n        gl.ARRAY_BUFFER,\r\n        new Float32Array([...localPosition]),\r\n        gl.STATIC_DRAW\r\n      );\r\n\r\n      gl.enableVertexAttribArray(positionLocation);\r\n      gl.vertexAttribPointer(positionLocation, 3, gl.FLOAT, false, 0, 0);\r\n      gl.drawArrays(gl.TRIANGLES, 0, localPosition.length / 3);\r\n      window.requestAnimationFrame(draw);\r\n    });\r\n  }\r\n  window.requestAnimationFrame(draw);\r\n})();\r\n"]}